<?php

/**
 * OnRequestReportsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 */

/**
 * On-request Report Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Apis\MP\US;

use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use Walmart\Apis\BaseApi;
use Walmart\ApiException;
use Walmart\ObjectSerializer;

/**
 * OnRequestReportsApi Class Doc Comment
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class OnRequestReportsApi extends BaseApi
{
    /**
     * @var string[] $contentTypes
     */
    public const contentTypes = [
        'downloadReport' => 'application/json',
        'generateReport' => 'application/json',
        'getRequestsStatus' => 'application/json',
        'getSingleRequestStatus' => 'application/json',
    ];

    /**
     * Operation downloadReport
     *
     * Download Report URL
     *
     * @param  string $requestId Automated ID generated by system that uniquely identifies the report request. (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\OnRequestReports\DownloadReportResponse
     */
    public function downloadReport(
        string $requestId
    ): \Walmart\Models\MP\US\OnRequestReports\DownloadReportResponse {
        return $this->downloadReportWithHttpInfo($requestId);
    }

    /**
     * Operation downloadReportWithHttpInfo
     *
     * Download Report URL
     *
     * @param  string $requestId Automated ID generated by system that uniquely identifies the report request. (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\OnRequestReports\DownloadReportResponse
     */
    protected function downloadReportWithHttpInfo(
        string $requestId,
    ): \Walmart\Models\MP\US\OnRequestReports\DownloadReportResponse {
        $request = $this->downloadReportRequest($requestId);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\MP\US\OnRequestReports\DownloadReportResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        $contentType = $response->getHeader('Content-Type')[0] ?? '';
                        if ('\Walmart\Models\MP\US\OnRequestReports\DownloadReportResponse' !== 'string') {
                            $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\US\OnRequestReports\DownloadReportResponse', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\MP\US\OnRequestReports\DownloadReportResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                $contentType = $response->getHeader('Content-Type')[0] ?? '';
                if ($returnType !== 'string') {
                    $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\US\OnRequestReports\DownloadReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation downloadReportAsync
     *
     * Download Report URL
     *
     * @param  string $requestId Automated ID generated by system that uniquely identifies the report request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadReportAsync(
        string $requestId
    ): PromiseInterface {
        return $this->downloadReportAsyncWithHttpInfo($requestId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadReportAsyncWithHttpInfo
     *
     * Download Report URL
     *
     * @param  string $requestId Automated ID generated by system that uniquely identifies the report request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function downloadReportAsyncWithHttpInfo(
        string $requestId,
    ): PromiseInterface {
        $returnType = '\Walmart\Models\MP\US\OnRequestReports\DownloadReportResponse';
        $request = $this->downloadReportRequest($requestId);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadReport'
     *
     * @param  string $requestId Automated ID generated by system that uniquely identifies the report request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadReportRequest(
        string $requestId,
    ): Request {
        $contentType = self::contentTypes['downloadReport'];

        // verify the required parameter 'requestId' is set
        if ($requestId === null || (is_array($requestId) && count($requestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $requestId when calling downloadReport'
            );
        }
        $resourcePath = '/v3/reports/downloadReport';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $method = 'GET';

        // query params
        $queryParams = array_merge(
            ObjectSerializer::toQueryValue(
                $requestId,
                'requestId', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                true // required
            ) ?? [],
        );

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $query = ObjectSerializer::buildQuery($queryParams);
        $requestInfo = [
            'path' => $resourcePath,
            'method' => $method,
            'timestamp' => $defaultHeaders['WM_SEC.TIMESTAMP'],
            'query' => $query,
        ];

        // this endpoint requires Bearer authentication (access token)
        $token = $this->config->getAccessToken();
        if ($token) {
            $headers['WM_SEC.ACCESS_TOKEN'] = $token->accessToken;
        }

        $operationHost = $this->config->getHost();
        return new Request(
            $method,
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generateReport
     *
     * Create Report Request
     *
     * @param  string $reportType Specifies the report type for the request. For example, reportType=ITEM creates an Item Report. (required)
     * @param  string $reportVersion Version of report for which the request is created. Supported versions for each report type are currently 'reportVersion=v1' for the following reportType(s): INVENTORY, CANCELLATION, DELIVERY_DEFECT, ITEM_PERFORMANCE, PROMO, RETURN_OVERRIDES, CPA, SHIPPING_CONFIGURATION, SHIPPING_PROGRAM, FITMENT_MISSING_ATTR, FITMENT_ACES_COVERAGE, BUYBOX and 'reportVersion=v1', 'reportVersion=v2', 'reportVersion=v3', 'reportVersion=v4' for the following reportType(s): ITEM. (required)
     * @param  \Walmart\Models\MP\US\OnRequestReports\GenerateReportPayload $generateReportPayload Request body (optional)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\OnRequestReports\GenerateReportResponse
     */
    public function generateReport(
        string $reportType,
        string $reportVersion,
        ?\Walmart\Models\MP\US\OnRequestReports\GenerateReportPayload $generateReportPayload = null
    ): \Walmart\Models\MP\US\OnRequestReports\GenerateReportResponse {
        return $this->generateReportWithHttpInfo($reportType, $reportVersion, $generateReportPayload);
    }

    /**
     * Operation generateReportWithHttpInfo
     *
     * Create Report Request
     *
     * @param  string $reportType Specifies the report type for the request. For example, reportType=ITEM creates an Item Report. (required)
     * @param  string $reportVersion Version of report for which the request is created. Supported versions for each report type are currently 'reportVersion=v1' for the following reportType(s): INVENTORY, CANCELLATION, DELIVERY_DEFECT, ITEM_PERFORMANCE, PROMO, RETURN_OVERRIDES, CPA, SHIPPING_CONFIGURATION, SHIPPING_PROGRAM, FITMENT_MISSING_ATTR, FITMENT_ACES_COVERAGE, BUYBOX and 'reportVersion=v1', 'reportVersion=v2', 'reportVersion=v3', 'reportVersion=v4' for the following reportType(s): ITEM. (required)
     * @param  \Walmart\Models\MP\US\OnRequestReports\GenerateReportPayload $generateReportPayload Request body (optional)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\OnRequestReports\GenerateReportResponse
     */
    protected function generateReportWithHttpInfo(
        string $reportType,
        string $reportVersion,
        ?\Walmart\Models\MP\US\OnRequestReports\GenerateReportPayload $generateReportPayload = null,
    ): \Walmart\Models\MP\US\OnRequestReports\GenerateReportResponse {
        $request = $this->generateReportRequest($reportType, $reportVersion, $generateReportPayload);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\MP\US\OnRequestReports\GenerateReportResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        $contentType = $response->getHeader('Content-Type')[0] ?? '';
                        if ('\Walmart\Models\MP\US\OnRequestReports\GenerateReportResponse' !== 'string') {
                            $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\US\OnRequestReports\GenerateReportResponse', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\MP\US\OnRequestReports\GenerateReportResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                $contentType = $response->getHeader('Content-Type')[0] ?? '';
                if ($returnType !== 'string') {
                    $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\US\OnRequestReports\GenerateReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation generateReportAsync
     *
     * Create Report Request
     *
     * @param  string $reportType Specifies the report type for the request. For example, reportType=ITEM creates an Item Report. (required)
     * @param  string $reportVersion Version of report for which the request is created. Supported versions for each report type are currently 'reportVersion=v1' for the following reportType(s): INVENTORY, CANCELLATION, DELIVERY_DEFECT, ITEM_PERFORMANCE, PROMO, RETURN_OVERRIDES, CPA, SHIPPING_CONFIGURATION, SHIPPING_PROGRAM, FITMENT_MISSING_ATTR, FITMENT_ACES_COVERAGE, BUYBOX and 'reportVersion=v1', 'reportVersion=v2', 'reportVersion=v3', 'reportVersion=v4' for the following reportType(s): ITEM. (required)
     * @param  \Walmart\Models\MP\US\OnRequestReports\GenerateReportPayload $generateReportPayload Request body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateReportAsync(
        string $reportType,
        string $reportVersion,
        ?\Walmart\Models\MP\US\OnRequestReports\GenerateReportPayload $generateReportPayload = null
    ): PromiseInterface {
        return $this->generateReportAsyncWithHttpInfo($reportType, $reportVersion, $generateReportPayload)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateReportAsyncWithHttpInfo
     *
     * Create Report Request
     *
     * @param  string $reportType Specifies the report type for the request. For example, reportType=ITEM creates an Item Report. (required)
     * @param  string $reportVersion Version of report for which the request is created. Supported versions for each report type are currently 'reportVersion=v1' for the following reportType(s): INVENTORY, CANCELLATION, DELIVERY_DEFECT, ITEM_PERFORMANCE, PROMO, RETURN_OVERRIDES, CPA, SHIPPING_CONFIGURATION, SHIPPING_PROGRAM, FITMENT_MISSING_ATTR, FITMENT_ACES_COVERAGE, BUYBOX and 'reportVersion=v1', 'reportVersion=v2', 'reportVersion=v3', 'reportVersion=v4' for the following reportType(s): ITEM. (required)
     * @param  \Walmart\Models\MP\US\OnRequestReports\GenerateReportPayload $generateReportPayload Request body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function generateReportAsyncWithHttpInfo(
        string $reportType,
        string $reportVersion,
        ?\Walmart\Models\MP\US\OnRequestReports\GenerateReportPayload $generateReportPayload = null,
    ): PromiseInterface {
        $returnType = '\Walmart\Models\MP\US\OnRequestReports\GenerateReportResponse';
        $request = $this->generateReportRequest($reportType, $reportVersion, $generateReportPayload);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'generateReport'
     *
     * @param  string $reportType Specifies the report type for the request. For example, reportType=ITEM creates an Item Report. (required)
     * @param  string $reportVersion Version of report for which the request is created. Supported versions for each report type are currently 'reportVersion=v1' for the following reportType(s): INVENTORY, CANCELLATION, DELIVERY_DEFECT, ITEM_PERFORMANCE, PROMO, RETURN_OVERRIDES, CPA, SHIPPING_CONFIGURATION, SHIPPING_PROGRAM, FITMENT_MISSING_ATTR, FITMENT_ACES_COVERAGE, BUYBOX and 'reportVersion=v1', 'reportVersion=v2', 'reportVersion=v3', 'reportVersion=v4' for the following reportType(s): ITEM. (required)
     * @param  \Walmart\Models\MP\US\OnRequestReports\GenerateReportPayload $generateReportPayload Request body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function generateReportRequest(
        string $reportType,
        string $reportVersion,
        ?\Walmart\Models\MP\US\OnRequestReports\GenerateReportPayload $generateReportPayload = null,
    ): Request {
        $contentType = self::contentTypes['generateReport'];

        // verify the required parameter 'reportType' is set
        if ($reportType === null || (is_array($reportType) && count($reportType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reportType when calling generateReport'
            );
        }
        // verify the required parameter 'reportVersion' is set
        if ($reportVersion === null || (is_array($reportVersion) && count($reportVersion) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reportVersion when calling generateReport'
            );
        }
        $resourcePath = '/v3/reports/reportRequests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $method = 'POST';

        // query params
        $queryParams = array_merge(
            ObjectSerializer::toQueryValue(
                $reportType,
                'reportType', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                true // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $reportVersion,
                'reportVersion', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                true // required
            ) ?? [],
        );

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // for model (json/xml)
        if (isset($generateReportPayload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($generateReportPayload));
            } else {
                $httpBody = $generateReportPayload;
            }
        } else if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $query = ObjectSerializer::buildQuery($queryParams);
        $requestInfo = [
            'path' => $resourcePath,
            'method' => $method,
            'timestamp' => $defaultHeaders['WM_SEC.TIMESTAMP'],
            'query' => $query,
        ];

        // this endpoint requires Bearer authentication (access token)
        $token = $this->config->getAccessToken();
        if ($token) {
            $headers['WM_SEC.ACCESS_TOKEN'] = $token->accessToken;
        }

        $operationHost = $this->config->getHost();
        return new Request(
            $method,
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRequestsStatus
     *
     * Get All Report Requests
     *
     * @param  string $reportType Type of report for which the request is created. Example, ITEM for Item Report. (required)
     * @param  string $reportVersion Version of report for which the request is created. Example, v1. (optional)
     * @param  string $requestStatus Status of report request. Possible values are RECEIVED, INPROGRESS, READY, ERROR. (optional)
     * @param  string $requestSubmissionStartDate Report request submittal start date for range of reports requested, in format: YYYY-MM-DDTHH:mm:ssZ (optional)
     * @param  string $requestSubmissionEndDate Report request submittal end date for range of reports requested, in format YYYY-MM-DDTHH:mm:ssZ (optional)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\OnRequestReports\RequestsStatusResponse
     */
    public function getRequestsStatus(
        string $reportType,
        ?string $reportVersion = null,
        ?string $requestStatus = null,
        ?string $requestSubmissionStartDate = null,
        ?string $requestSubmissionEndDate = null
    ): \Walmart\Models\MP\US\OnRequestReports\RequestsStatusResponse {
        return $this->getRequestsStatusWithHttpInfo($reportType, $reportVersion, $requestStatus, $requestSubmissionStartDate, $requestSubmissionEndDate);
    }

    /**
     * Operation getRequestsStatusWithHttpInfo
     *
     * Get All Report Requests
     *
     * @param  string $reportType Type of report for which the request is created. Example, ITEM for Item Report. (required)
     * @param  string $reportVersion Version of report for which the request is created. Example, v1. (optional)
     * @param  string $requestStatus Status of report request. Possible values are RECEIVED, INPROGRESS, READY, ERROR. (optional)
     * @param  string $requestSubmissionStartDate Report request submittal start date for range of reports requested, in format: YYYY-MM-DDTHH:mm:ssZ (optional)
     * @param  string $requestSubmissionEndDate Report request submittal end date for range of reports requested, in format YYYY-MM-DDTHH:mm:ssZ (optional)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\OnRequestReports\RequestsStatusResponse
     */
    protected function getRequestsStatusWithHttpInfo(
        string $reportType,
        ?string $reportVersion = null,
        ?string $requestStatus = null,
        ?string $requestSubmissionStartDate = null,
        ?string $requestSubmissionEndDate = null,
    ): \Walmart\Models\MP\US\OnRequestReports\RequestsStatusResponse {
        $request = $this->getRequestsStatusRequest($reportType, $reportVersion, $requestStatus, $requestSubmissionStartDate, $requestSubmissionEndDate);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\MP\US\OnRequestReports\RequestsStatusResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        $contentType = $response->getHeader('Content-Type')[0] ?? '';
                        if ('\Walmart\Models\MP\US\OnRequestReports\RequestsStatusResponse' !== 'string') {
                            $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\US\OnRequestReports\RequestsStatusResponse', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\MP\US\OnRequestReports\RequestsStatusResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                $contentType = $response->getHeader('Content-Type')[0] ?? '';
                if ($returnType !== 'string') {
                    $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\US\OnRequestReports\RequestsStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation getRequestsStatusAsync
     *
     * Get All Report Requests
     *
     * @param  string $reportType Type of report for which the request is created. Example, ITEM for Item Report. (required)
     * @param  string $reportVersion Version of report for which the request is created. Example, v1. (optional)
     * @param  string $requestStatus Status of report request. Possible values are RECEIVED, INPROGRESS, READY, ERROR. (optional)
     * @param  string $requestSubmissionStartDate Report request submittal start date for range of reports requested, in format: YYYY-MM-DDTHH:mm:ssZ (optional)
     * @param  string $requestSubmissionEndDate Report request submittal end date for range of reports requested, in format YYYY-MM-DDTHH:mm:ssZ (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRequestsStatusAsync(
        string $reportType,
        ?string $reportVersion = null,
        ?string $requestStatus = null,
        ?string $requestSubmissionStartDate = null,
        ?string $requestSubmissionEndDate = null
    ): PromiseInterface {
        return $this->getRequestsStatusAsyncWithHttpInfo($reportType, $reportVersion, $requestStatus, $requestSubmissionStartDate, $requestSubmissionEndDate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRequestsStatusAsyncWithHttpInfo
     *
     * Get All Report Requests
     *
     * @param  string $reportType Type of report for which the request is created. Example, ITEM for Item Report. (required)
     * @param  string $reportVersion Version of report for which the request is created. Example, v1. (optional)
     * @param  string $requestStatus Status of report request. Possible values are RECEIVED, INPROGRESS, READY, ERROR. (optional)
     * @param  string $requestSubmissionStartDate Report request submittal start date for range of reports requested, in format: YYYY-MM-DDTHH:mm:ssZ (optional)
     * @param  string $requestSubmissionEndDate Report request submittal end date for range of reports requested, in format YYYY-MM-DDTHH:mm:ssZ (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function getRequestsStatusAsyncWithHttpInfo(
        string $reportType,
        ?string $reportVersion = null,
        ?string $requestStatus = null,
        ?string $requestSubmissionStartDate = null,
        ?string $requestSubmissionEndDate = null,
    ): PromiseInterface {
        $returnType = '\Walmart\Models\MP\US\OnRequestReports\RequestsStatusResponse';
        $request = $this->getRequestsStatusRequest($reportType, $reportVersion, $requestStatus, $requestSubmissionStartDate, $requestSubmissionEndDate);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRequestsStatus'
     *
     * @param  string $reportType Type of report for which the request is created. Example, ITEM for Item Report. (required)
     * @param  string $reportVersion Version of report for which the request is created. Example, v1. (optional)
     * @param  string $requestStatus Status of report request. Possible values are RECEIVED, INPROGRESS, READY, ERROR. (optional)
     * @param  string $requestSubmissionStartDate Report request submittal start date for range of reports requested, in format: YYYY-MM-DDTHH:mm:ssZ (optional)
     * @param  string $requestSubmissionEndDate Report request submittal end date for range of reports requested, in format YYYY-MM-DDTHH:mm:ssZ (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getRequestsStatusRequest(
        string $reportType,
        ?string $reportVersion = null,
        ?string $requestStatus = null,
        ?string $requestSubmissionStartDate = null,
        ?string $requestSubmissionEndDate = null,
    ): Request {
        $contentType = self::contentTypes['getRequestsStatus'];

        // verify the required parameter 'reportType' is set
        if ($reportType === null || (is_array($reportType) && count($reportType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reportType when calling getRequestsStatus'
            );
        }
        $resourcePath = '/v3/reports/reportRequests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $method = 'GET';

        // query params
        $queryParams = array_merge(
            ObjectSerializer::toQueryValue(
                $reportType,
                'reportType', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                true // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $reportVersion,
                'reportVersion', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $requestStatus,
                'requestStatus', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $requestSubmissionStartDate,
                'requestSubmissionStartDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $requestSubmissionEndDate,
                'requestSubmissionEndDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
        );

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $query = ObjectSerializer::buildQuery($queryParams);
        $requestInfo = [
            'path' => $resourcePath,
            'method' => $method,
            'timestamp' => $defaultHeaders['WM_SEC.TIMESTAMP'],
            'query' => $query,
        ];

        // this endpoint requires Bearer authentication (access token)
        $token = $this->config->getAccessToken();
        if ($token) {
            $headers['WM_SEC.ACCESS_TOKEN'] = $token->accessToken;
        }

        $operationHost = $this->config->getHost();
        return new Request(
            $method,
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSingleRequestStatus
     *
     * Report Request Status
     *
     * @param  string $requestId Automated ID generated by system that uniquely identifies the report request. (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\OnRequestReports\RequestStatusResponse
     */
    public function getSingleRequestStatus(
        string $requestId
    ): \Walmart\Models\MP\US\OnRequestReports\RequestStatusResponse {
        return $this->getSingleRequestStatusWithHttpInfo($requestId);
    }

    /**
     * Operation getSingleRequestStatusWithHttpInfo
     *
     * Report Request Status
     *
     * @param  string $requestId Automated ID generated by system that uniquely identifies the report request. (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\OnRequestReports\RequestStatusResponse
     */
    protected function getSingleRequestStatusWithHttpInfo(
        string $requestId,
    ): \Walmart\Models\MP\US\OnRequestReports\RequestStatusResponse {
        $request = $this->getSingleRequestStatusRequest($requestId);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\MP\US\OnRequestReports\RequestStatusResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        $contentType = $response->getHeader('Content-Type')[0] ?? '';
                        if ('\Walmart\Models\MP\US\OnRequestReports\RequestStatusResponse' !== 'string') {
                            $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\US\OnRequestReports\RequestStatusResponse', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\MP\US\OnRequestReports\RequestStatusResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                $contentType = $response->getHeader('Content-Type')[0] ?? '';
                if ($returnType !== 'string') {
                    $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\US\OnRequestReports\RequestStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation getSingleRequestStatusAsync
     *
     * Report Request Status
     *
     * @param  string $requestId Automated ID generated by system that uniquely identifies the report request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSingleRequestStatusAsync(
        string $requestId
    ): PromiseInterface {
        return $this->getSingleRequestStatusAsyncWithHttpInfo($requestId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSingleRequestStatusAsyncWithHttpInfo
     *
     * Report Request Status
     *
     * @param  string $requestId Automated ID generated by system that uniquely identifies the report request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function getSingleRequestStatusAsyncWithHttpInfo(
        string $requestId,
    ): PromiseInterface {
        $returnType = '\Walmart\Models\MP\US\OnRequestReports\RequestStatusResponse';
        $request = $this->getSingleRequestStatusRequest($requestId);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSingleRequestStatus'
     *
     * @param  string $requestId Automated ID generated by system that uniquely identifies the report request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSingleRequestStatusRequest(
        string $requestId,
    ): Request {
        $contentType = self::contentTypes['getSingleRequestStatus'];

        // verify the required parameter 'requestId' is set
        if ($requestId === null || (is_array($requestId) && count($requestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $requestId when calling getSingleRequestStatus'
            );
        }
        $resourcePath = '/v3/reports/reportRequests/{requestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $method = 'GET';

        // path params
        if ($requestId !== null) {
            $resourcePath = str_replace(
                '{' . 'requestId' . '}',
                ObjectSerializer::toPathValue($requestId),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $query = ObjectSerializer::buildQuery($queryParams);
        $requestInfo = [
            'path' => $resourcePath,
            'method' => $method,
            'timestamp' => $defaultHeaders['WM_SEC.TIMESTAMP'],
            'query' => $query,
        ];

        // this endpoint requires Bearer authentication (access token)
        $token = $this->config->getAccessToken();
        if ($token) {
            $headers['WM_SEC.ACCESS_TOKEN'] = $token->accessToken;
        }

        $operationHost = $this->config->getHost();
        return new Request(
            $method,
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }
}

