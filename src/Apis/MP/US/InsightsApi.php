<?php

/**
 * InsightsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 */

/**
 * Insights Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Apis\MP\US;

use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use Walmart\Apis\BaseApi;
use Walmart\ApiException;
use Walmart\ObjectSerializer;

/**
 * InsightsApi Class Doc Comment
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class InsightsApi extends BaseApi
{
    /**
     * @var string[] $contentTypes
     */
    public const contentTypes = [
        'getCategoriesList' => 'application/json',
        'getListingQualityScore' => 'application/json',
        'getProSellerBadgeInfo' => 'application/json',
        'getTrendingResult' => 'application/json',
        'getUnpublishedItemCount' => 'application/json',
        'getUnpublishedItems' => 'application/json',
        'itemsDetailsForListing' => 'application/json',
    ];

    /**
     * Operation getCategoriesList
     *
     * Item count with listing quality issues
     *
     * @param  bool $viewTrendingItems Specify whether or not to include seller's items that are trending in the Listing Quality Score. (optional, default to true)
     * @param  bool $wfsFlag Specify whether or not to include WFS-eligible items in the overall Listing Quality Score. (optional)
     * @param  int $hasIssue Specify whether or not to include items that have issues in the Listing Quality Score. (optional, default to 0)
     * @param  string $type Specify whether to get item count by brand or category. Category is the default value when no type is specified. (optional)
     * @param  int $limit Specify number of items to return. The value is defaulted to 100 and the maximum value is 1000. (optional)
     * @param  int $offset Specify the offset of item list to be returned. (optional, default to 0)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\Insights\GetListingQualityScore
     */
    public function getCategoriesList(
        ?bool $viewTrendingItems = true,
        ?bool $wfsFlag = null,
        ?int $hasIssue = 0,
        ?string $type = null,
        ?int $limit = null,
        ?int $offset = 0
    ): \Walmart\Models\MP\US\Insights\GetListingQualityScore {
        return $this->getCategoriesListWithHttpInfo($viewTrendingItems, $wfsFlag, $hasIssue, $type, $limit, $offset);
    }

    /**
     * Operation getCategoriesListWithHttpInfo
     *
     * Item count with listing quality issues
     *
     * @param  bool $viewTrendingItems Specify whether or not to include seller's items that are trending in the Listing Quality Score. (optional, default to true)
     * @param  bool $wfsFlag Specify whether or not to include WFS-eligible items in the overall Listing Quality Score. (optional)
     * @param  int $hasIssue Specify whether or not to include items that have issues in the Listing Quality Score. (optional, default to 0)
     * @param  string $type Specify whether to get item count by brand or category. Category is the default value when no type is specified. (optional)
     * @param  int $limit Specify number of items to return. The value is defaulted to 100 and the maximum value is 1000. (optional)
     * @param  int $offset Specify the offset of item list to be returned. (optional, default to 0)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\Insights\GetListingQualityScore
     */
    protected function getCategoriesListWithHttpInfo(
        ?bool $viewTrendingItems = true,
        ?bool $wfsFlag = null,
        ?int $hasIssue = 0,
        ?string $type = null,
        ?int $limit = null,
        ?int $offset = 0,
    ): \Walmart\Models\MP\US\Insights\GetListingQualityScore {
        $request = $this->getCategoriesListRequest($viewTrendingItems, $wfsFlag, $hasIssue, $type, $limit, $offset);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\MP\US\Insights\GetListingQualityScore' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        $contentType = $response->getHeader('Content-Type')[0] ?? '';
                        if ('\Walmart\Models\MP\US\Insights\GetListingQualityScore' !== 'string') {
                            $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\US\Insights\GetListingQualityScore', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\MP\US\Insights\GetListingQualityScore';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                $contentType = $response->getHeader('Content-Type')[0] ?? '';
                if ($returnType !== 'string') {
                    $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\US\Insights\GetListingQualityScore',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation getCategoriesListAsync
     *
     * Item count with listing quality issues
     *
     * @param  bool $viewTrendingItems Specify whether or not to include seller's items that are trending in the Listing Quality Score. (optional, default to true)
     * @param  bool $wfsFlag Specify whether or not to include WFS-eligible items in the overall Listing Quality Score. (optional)
     * @param  int $hasIssue Specify whether or not to include items that have issues in the Listing Quality Score. (optional, default to 0)
     * @param  string $type Specify whether to get item count by brand or category. Category is the default value when no type is specified. (optional)
     * @param  int $limit Specify number of items to return. The value is defaulted to 100 and the maximum value is 1000. (optional)
     * @param  int $offset Specify the offset of item list to be returned. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCategoriesListAsync(
        ?bool $viewTrendingItems = true,
        ?bool $wfsFlag = null,
        ?int $hasIssue = 0,
        ?string $type = null,
        ?int $limit = null,
        ?int $offset = 0
    ): PromiseInterface {
        return $this->getCategoriesListAsyncWithHttpInfo($viewTrendingItems, $wfsFlag, $hasIssue, $type, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCategoriesListAsyncWithHttpInfo
     *
     * Item count with listing quality issues
     *
     * @param  bool $viewTrendingItems Specify whether or not to include seller's items that are trending in the Listing Quality Score. (optional, default to true)
     * @param  bool $wfsFlag Specify whether or not to include WFS-eligible items in the overall Listing Quality Score. (optional)
     * @param  int $hasIssue Specify whether or not to include items that have issues in the Listing Quality Score. (optional, default to 0)
     * @param  string $type Specify whether to get item count by brand or category. Category is the default value when no type is specified. (optional)
     * @param  int $limit Specify number of items to return. The value is defaulted to 100 and the maximum value is 1000. (optional)
     * @param  int $offset Specify the offset of item list to be returned. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function getCategoriesListAsyncWithHttpInfo(
        ?bool $viewTrendingItems = true,
        ?bool $wfsFlag = null,
        ?int $hasIssue = 0,
        ?string $type = null,
        ?int $limit = null,
        ?int $offset = 0,
    ): PromiseInterface {
        $returnType = '\Walmart\Models\MP\US\Insights\GetListingQualityScore';
        $request = $this->getCategoriesListRequest($viewTrendingItems, $wfsFlag, $hasIssue, $type, $limit, $offset);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCategoriesList'
     *
     * @param  bool $viewTrendingItems Specify whether or not to include seller's items that are trending in the Listing Quality Score. (optional, default to true)
     * @param  bool $wfsFlag Specify whether or not to include WFS-eligible items in the overall Listing Quality Score. (optional)
     * @param  int $hasIssue Specify whether or not to include items that have issues in the Listing Quality Score. (optional, default to 0)
     * @param  string $type Specify whether to get item count by brand or category. Category is the default value when no type is specified. (optional)
     * @param  int $limit Specify number of items to return. The value is defaulted to 100 and the maximum value is 1000. (optional)
     * @param  int $offset Specify the offset of item list to be returned. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCategoriesListRequest(
        ?bool $viewTrendingItems = true,
        ?bool $wfsFlag = null,
        ?int $hasIssue = 0,
        ?string $type = null,
        ?int $limit = null,
        ?int $offset = 0,
    ): Request {
        $contentType = self::contentTypes['getCategoriesList'];

        $resourcePath = '/v3/insights/items/listingQuality/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $method = 'GET';

        // query params
        $queryParams = array_merge(
            ObjectSerializer::toQueryValue(
                $viewTrendingItems,
                'viewTrendingItems', // param base name
                'boolean', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $wfsFlag,
                'wfsFlag', // param base name
                'boolean', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $hasIssue,
                'hasIssue', // param base name
                'integer', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $type,
                'type', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $limit,
                'limit', // param base name
                'integer', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $offset,
                'offset', // param base name
                'integer', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
        );

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $query = ObjectSerializer::buildQuery($queryParams);
        $requestInfo = [
            'path' => $resourcePath,
            'method' => $method,
            'timestamp' => $defaultHeaders['WM_SEC.TIMESTAMP'],
            'query' => $query,
        ];

        // this endpoint requires Bearer authentication (access token)
        $token = $this->config->getAccessToken();
        if ($token) {
            $headers['WM_SEC.ACCESS_TOKEN'] = $token->accessToken;
        }

        $operationHost = $this->config->getHost();
        return new Request(
            $method,
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getListingQualityScore
     *
     * Seller Listing Quality Score
     *
     * @param  bool $viewTrendingItems Specify whether or not to include seller's items that are trending in the Listing Quality Score. (optional)
     * @param  string $wfsFlag Specify whether or not to include WFS-eligible items in the overall Listing Quality Score. (optional)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\Insights\GetListingQualityScore
     */
    public function getListingQualityScore(
        ?bool $viewTrendingItems = null,
        ?string $wfsFlag = null
    ): \Walmart\Models\MP\US\Insights\GetListingQualityScore {
        return $this->getListingQualityScoreWithHttpInfo($viewTrendingItems, $wfsFlag);
    }

    /**
     * Operation getListingQualityScoreWithHttpInfo
     *
     * Seller Listing Quality Score
     *
     * @param  bool $viewTrendingItems Specify whether or not to include seller's items that are trending in the Listing Quality Score. (optional)
     * @param  string $wfsFlag Specify whether or not to include WFS-eligible items in the overall Listing Quality Score. (optional)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\Insights\GetListingQualityScore
     */
    protected function getListingQualityScoreWithHttpInfo(
        ?bool $viewTrendingItems = null,
        ?string $wfsFlag = null,
    ): \Walmart\Models\MP\US\Insights\GetListingQualityScore {
        $request = $this->getListingQualityScoreRequest($viewTrendingItems, $wfsFlag);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\MP\US\Insights\GetListingQualityScore' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        $contentType = $response->getHeader('Content-Type')[0] ?? '';
                        if ('\Walmart\Models\MP\US\Insights\GetListingQualityScore' !== 'string') {
                            $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\US\Insights\GetListingQualityScore', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\MP\US\Insights\GetListingQualityScore';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                $contentType = $response->getHeader('Content-Type')[0] ?? '';
                if ($returnType !== 'string') {
                    $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\US\Insights\GetListingQualityScore',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation getListingQualityScoreAsync
     *
     * Seller Listing Quality Score
     *
     * @param  bool $viewTrendingItems Specify whether or not to include seller's items that are trending in the Listing Quality Score. (optional)
     * @param  string $wfsFlag Specify whether or not to include WFS-eligible items in the overall Listing Quality Score. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingQualityScoreAsync(
        ?bool $viewTrendingItems = null,
        ?string $wfsFlag = null
    ): PromiseInterface {
        return $this->getListingQualityScoreAsyncWithHttpInfo($viewTrendingItems, $wfsFlag)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getListingQualityScoreAsyncWithHttpInfo
     *
     * Seller Listing Quality Score
     *
     * @param  bool $viewTrendingItems Specify whether or not to include seller's items that are trending in the Listing Quality Score. (optional)
     * @param  string $wfsFlag Specify whether or not to include WFS-eligible items in the overall Listing Quality Score. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function getListingQualityScoreAsyncWithHttpInfo(
        ?bool $viewTrendingItems = null,
        ?string $wfsFlag = null,
    ): PromiseInterface {
        $returnType = '\Walmart\Models\MP\US\Insights\GetListingQualityScore';
        $request = $this->getListingQualityScoreRequest($viewTrendingItems, $wfsFlag);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'getListingQualityScore'
     *
     * @param  bool $viewTrendingItems Specify whether or not to include seller's items that are trending in the Listing Quality Score. (optional)
     * @param  string $wfsFlag Specify whether or not to include WFS-eligible items in the overall Listing Quality Score. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getListingQualityScoreRequest(
        ?bool $viewTrendingItems = null,
        ?string $wfsFlag = null,
    ): Request {
        $contentType = self::contentTypes['getListingQualityScore'];

        $resourcePath = '/v3/insights/items/listingQuality/score';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $method = 'GET';

        // query params
        $queryParams = array_merge(
            ObjectSerializer::toQueryValue(
                $viewTrendingItems,
                'viewTrendingItems', // param base name
                'boolean', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $wfsFlag,
                'wfsFlag', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
        );

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $query = ObjectSerializer::buildQuery($queryParams);
        $requestInfo = [
            'path' => $resourcePath,
            'method' => $method,
            'timestamp' => $defaultHeaders['WM_SEC.TIMESTAMP'],
            'query' => $query,
        ];

        // this endpoint requires Bearer authentication (access token)
        $token = $this->config->getAccessToken();
        if ($token) {
            $headers['WM_SEC.ACCESS_TOKEN'] = $token->accessToken;
        }

        $operationHost = $this->config->getHost();
        return new Request(
            $method,
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProSellerBadgeInfo
     *
     * Pro Seller Badge Status
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\Insights\ProSellerResponse
     */
    public function getProSellerBadgeInfo(): \Walmart\Models\MP\US\Insights\ProSellerResponse
    {
        return $this->getProSellerBadgeInfoWithHttpInfo();
    }

    /**
     * Operation getProSellerBadgeInfoWithHttpInfo
     *
     * Pro Seller Badge Status
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\Insights\ProSellerResponse
     */
    protected function getProSellerBadgeInfoWithHttpInfo(): \Walmart\Models\MP\US\Insights\ProSellerResponse
    {
        $request = $this->getProSellerBadgeInfoRequest();
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\MP\US\Insights\ProSellerResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        $contentType = $response->getHeader('Content-Type')[0] ?? '';
                        if ('\Walmart\Models\MP\US\Insights\ProSellerResponse' !== 'string') {
                            $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\US\Insights\ProSellerResponse', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\MP\US\Insights\ProSellerResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                $contentType = $response->getHeader('Content-Type')[0] ?? '';
                if ($returnType !== 'string') {
                    $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\US\Insights\ProSellerResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation getProSellerBadgeInfoAsync
     *
     * Pro Seller Badge Status
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProSellerBadgeInfoAsync(
    ): PromiseInterface {
        return $this->getProSellerBadgeInfoAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProSellerBadgeInfoAsyncWithHttpInfo
     *
     * Pro Seller Badge Status
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function getProSellerBadgeInfoAsyncWithHttpInfo(): PromiseInterface
    {
        $returnType = '\Walmart\Models\MP\US\Insights\ProSellerResponse';
        $request = $this->getProSellerBadgeInfoRequest();
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProSellerBadgeInfo'
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProSellerBadgeInfoRequest(): Request
    {
        $contentType = self::contentTypes['getProSellerBadgeInfo'];

        $resourcePath = '/v3/insights/prosellerbadge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $method = 'GET';

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $query = ObjectSerializer::buildQuery($queryParams);
        $requestInfo = [
            'path' => $resourcePath,
            'method' => $method,
            'timestamp' => $defaultHeaders['WM_SEC.TIMESTAMP'],
            'query' => $query,
        ];

        // this endpoint requires Bearer authentication (access token)
        $token = $this->config->getAccessToken();
        if ($token) {
            $headers['WM_SEC.ACCESS_TOKEN'] = $token->accessToken;
        }

        $operationHost = $this->config->getHost();
        return new Request(
            $method,
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTrendingResult
     *
     * Top Trending Items
     *
     * @param  string $departmentId departmentId (required)
     * @param  string $categoryId categoryId (optional, default to 'null')
     * @param  string $limit The number of items to be returned. (optional, default to '20')
     * @param  string $offset The object response to start with, where 0 is the first entity that can be requested. (optional, default to '0')
     * @param  string $timeFrame Returns all trending items for the given time frame in days (optional, default to '7')
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\Insights\GetTrendingResult
     */
    public function getTrendingResult(
        string $departmentId,
        ?string $categoryId = 'null',
        ?string $limit = '20',
        ?string $offset = '0',
        ?string $timeFrame = '7'
    ): \Walmart\Models\MP\US\Insights\GetTrendingResult {
        return $this->getTrendingResultWithHttpInfo($departmentId, $categoryId, $limit, $offset, $timeFrame);
    }

    /**
     * Operation getTrendingResultWithHttpInfo
     *
     * Top Trending Items
     *
     * @param  string $departmentId departmentId (required)
     * @param  string $categoryId categoryId (optional, default to 'null')
     * @param  string $limit The number of items to be returned. (optional, default to '20')
     * @param  string $offset The object response to start with, where 0 is the first entity that can be requested. (optional, default to '0')
     * @param  string $timeFrame Returns all trending items for the given time frame in days (optional, default to '7')
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\Insights\GetTrendingResult
     */
    protected function getTrendingResultWithHttpInfo(
        string $departmentId,
        ?string $categoryId = 'null',
        ?string $limit = '20',
        ?string $offset = '0',
        ?string $timeFrame = '7',
    ): \Walmart\Models\MP\US\Insights\GetTrendingResult {
        $request = $this->getTrendingResultRequest($departmentId, $categoryId, $limit, $offset, $timeFrame);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\MP\US\Insights\GetTrendingResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        $contentType = $response->getHeader('Content-Type')[0] ?? '';
                        if ('\Walmart\Models\MP\US\Insights\GetTrendingResult' !== 'string') {
                            $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\US\Insights\GetTrendingResult', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\MP\US\Insights\GetTrendingResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                $contentType = $response->getHeader('Content-Type')[0] ?? '';
                if ($returnType !== 'string') {
                    $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\US\Insights\GetTrendingResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation getTrendingResultAsync
     *
     * Top Trending Items
     *
     * @param  string $departmentId departmentId (required)
     * @param  string $categoryId categoryId (optional, default to 'null')
     * @param  string $limit The number of items to be returned. (optional, default to '20')
     * @param  string $offset The object response to start with, where 0 is the first entity that can be requested. (optional, default to '0')
     * @param  string $timeFrame Returns all trending items for the given time frame in days (optional, default to '7')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTrendingResultAsync(
        string $departmentId,
        ?string $categoryId = 'null',
        ?string $limit = '20',
        ?string $offset = '0',
        ?string $timeFrame = '7'
    ): PromiseInterface {
        return $this->getTrendingResultAsyncWithHttpInfo($departmentId, $categoryId, $limit, $offset, $timeFrame)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTrendingResultAsyncWithHttpInfo
     *
     * Top Trending Items
     *
     * @param  string $departmentId departmentId (required)
     * @param  string $categoryId categoryId (optional, default to 'null')
     * @param  string $limit The number of items to be returned. (optional, default to '20')
     * @param  string $offset The object response to start with, where 0 is the first entity that can be requested. (optional, default to '0')
     * @param  string $timeFrame Returns all trending items for the given time frame in days (optional, default to '7')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function getTrendingResultAsyncWithHttpInfo(
        string $departmentId,
        ?string $categoryId = 'null',
        ?string $limit = '20',
        ?string $offset = '0',
        ?string $timeFrame = '7',
    ): PromiseInterface {
        $returnType = '\Walmart\Models\MP\US\Insights\GetTrendingResult';
        $request = $this->getTrendingResultRequest($departmentId, $categoryId, $limit, $offset, $timeFrame);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTrendingResult'
     *
     * @param  string $departmentId departmentId (required)
     * @param  string $categoryId categoryId (optional, default to 'null')
     * @param  string $limit The number of items to be returned. (optional, default to '20')
     * @param  string $offset The object response to start with, where 0 is the first entity that can be requested. (optional, default to '0')
     * @param  string $timeFrame Returns all trending items for the given time frame in days (optional, default to '7')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTrendingResultRequest(
        string $departmentId,
        ?string $categoryId = 'null',
        ?string $limit = '20',
        ?string $offset = '0',
        ?string $timeFrame = '7',
    ): Request {
        $contentType = self::contentTypes['getTrendingResult'];

        // verify the required parameter 'departmentId' is set
        if ($departmentId === null || (is_array($departmentId) && count($departmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $departmentId when calling getTrendingResult'
            );
        }
        $resourcePath = '/v3/insights/items/trending';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $method = 'GET';

        // query params
        $queryParams = array_merge(
            ObjectSerializer::toQueryValue(
                $departmentId,
                'departmentId', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                true // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $categoryId,
                'categoryId', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $limit,
                'limit', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $offset,
                'offset', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $timeFrame,
                'timeFrame', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
        );

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $query = ObjectSerializer::buildQuery($queryParams);
        $requestInfo = [
            'path' => $resourcePath,
            'method' => $method,
            'timestamp' => $defaultHeaders['WM_SEC.TIMESTAMP'],
            'query' => $query,
        ];

        // this endpoint requires Bearer authentication (access token)
        $token = $this->config->getAccessToken();
        if ($token) {
            $headers['WM_SEC.ACCESS_TOKEN'] = $token->accessToken;
        }

        $operationHost = $this->config->getHost();
        return new Request(
            $method,
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUnpublishedItemCount
     *
     * Unpublished Item Counts
     *
     * @param  string $fromDate Returns all unpublished items count with reason codes since the given date (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\Insights\GetUnpublishedItemsCount
     */
    public function getUnpublishedItemCount(
        string $fromDate
    ): \Walmart\Models\MP\US\Insights\GetUnpublishedItemsCount {
        return $this->getUnpublishedItemCountWithHttpInfo($fromDate);
    }

    /**
     * Operation getUnpublishedItemCountWithHttpInfo
     *
     * Unpublished Item Counts
     *
     * @param  string $fromDate Returns all unpublished items count with reason codes since the given date (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\Insights\GetUnpublishedItemsCount
     */
    protected function getUnpublishedItemCountWithHttpInfo(
        string $fromDate,
    ): \Walmart\Models\MP\US\Insights\GetUnpublishedItemsCount {
        $request = $this->getUnpublishedItemCountRequest($fromDate);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\MP\US\Insights\GetUnpublishedItemsCount' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        $contentType = $response->getHeader('Content-Type')[0] ?? '';
                        if ('\Walmart\Models\MP\US\Insights\GetUnpublishedItemsCount' !== 'string') {
                            $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\US\Insights\GetUnpublishedItemsCount', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\MP\US\Insights\GetUnpublishedItemsCount';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                $contentType = $response->getHeader('Content-Type')[0] ?? '';
                if ($returnType !== 'string') {
                    $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\US\Insights\GetUnpublishedItemsCount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation getUnpublishedItemCountAsync
     *
     * Unpublished Item Counts
     *
     * @param  string $fromDate Returns all unpublished items count with reason codes since the given date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUnpublishedItemCountAsync(
        string $fromDate
    ): PromiseInterface {
        return $this->getUnpublishedItemCountAsyncWithHttpInfo($fromDate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUnpublishedItemCountAsyncWithHttpInfo
     *
     * Unpublished Item Counts
     *
     * @param  string $fromDate Returns all unpublished items count with reason codes since the given date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function getUnpublishedItemCountAsyncWithHttpInfo(
        string $fromDate,
    ): PromiseInterface {
        $returnType = '\Walmart\Models\MP\US\Insights\GetUnpublishedItemsCount';
        $request = $this->getUnpublishedItemCountRequest($fromDate);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUnpublishedItemCount'
     *
     * @param  string $fromDate Returns all unpublished items count with reason codes since the given date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getUnpublishedItemCountRequest(
        string $fromDate,
    ): Request {
        $contentType = self::contentTypes['getUnpublishedItemCount'];

        // verify the required parameter 'fromDate' is set
        if ($fromDate === null || (is_array($fromDate) && count($fromDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fromDate when calling getUnpublishedItemCount'
            );
        }
        $resourcePath = '/v3/insights/items/unpublished/counts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $method = 'GET';

        // query params
        $queryParams = array_merge(
            ObjectSerializer::toQueryValue(
                $fromDate,
                'fromDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                true // required
            ) ?? [],
        );

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $query = ObjectSerializer::buildQuery($queryParams);
        $requestInfo = [
            'path' => $resourcePath,
            'method' => $method,
            'timestamp' => $defaultHeaders['WM_SEC.TIMESTAMP'],
            'query' => $query,
        ];

        // this endpoint requires Bearer authentication (access token)
        $token = $this->config->getAccessToken();
        if ($token) {
            $headers['WM_SEC.ACCESS_TOKEN'] = $token->accessToken;
        }

        $operationHost = $this->config->getHost();
        return new Request(
            $method,
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUnpublishedItems
     *
     * Unpublished Items
     *
     * @param  string $fromDate Returns all unpublished items since the given date (required)
     * @param  string $unpublishedReasonCode Unpublished reason code (optional, default to 'all')
     * @param  string $limit The number of items to be returned. (optional, default to '20')
     * @param  string $offerLifecycleStatus The lifecycle status of an item describes where the item listing is in the overall lifecycle. Examples of allowed values are ACTIVE , ARCHIVED, RETIRED. (optional, default to 'all')
     * @param  string $marketTrending Filter the item list to return only items that are trending on Walmart.com (optional, default to 'true')
     * @param  string $itemsWithInventory Filter the item list to return only items that have inventory (optional, default to 'true')
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\Insights\GetUnpublishedItem
     */
    public function getUnpublishedItems(
        string $fromDate,
        ?string $unpublishedReasonCode = 'all',
        ?string $limit = '20',
        ?string $offerLifecycleStatus = 'all',
        ?string $marketTrending = 'true',
        ?string $itemsWithInventory = 'true'
    ): \Walmart\Models\MP\US\Insights\GetUnpublishedItem {
        return $this->getUnpublishedItemsWithHttpInfo($fromDate, $unpublishedReasonCode, $limit, $offerLifecycleStatus, $marketTrending, $itemsWithInventory);
    }

    /**
     * Operation getUnpublishedItemsWithHttpInfo
     *
     * Unpublished Items
     *
     * @param  string $fromDate Returns all unpublished items since the given date (required)
     * @param  string $unpublishedReasonCode Unpublished reason code (optional, default to 'all')
     * @param  string $limit The number of items to be returned. (optional, default to '20')
     * @param  string $offerLifecycleStatus The lifecycle status of an item describes where the item listing is in the overall lifecycle. Examples of allowed values are ACTIVE , ARCHIVED, RETIRED. (optional, default to 'all')
     * @param  string $marketTrending Filter the item list to return only items that are trending on Walmart.com (optional, default to 'true')
     * @param  string $itemsWithInventory Filter the item list to return only items that have inventory (optional, default to 'true')
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\Insights\GetUnpublishedItem
     */
    protected function getUnpublishedItemsWithHttpInfo(
        string $fromDate,
        ?string $unpublishedReasonCode = 'all',
        ?string $limit = '20',
        ?string $offerLifecycleStatus = 'all',
        ?string $marketTrending = 'true',
        ?string $itemsWithInventory = 'true',
    ): \Walmart\Models\MP\US\Insights\GetUnpublishedItem {
        $request = $this->getUnpublishedItemsRequest($fromDate, $unpublishedReasonCode, $limit, $offerLifecycleStatus, $marketTrending, $itemsWithInventory);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\MP\US\Insights\GetUnpublishedItem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        $contentType = $response->getHeader('Content-Type')[0] ?? '';
                        if ('\Walmart\Models\MP\US\Insights\GetUnpublishedItem' !== 'string') {
                            $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\US\Insights\GetUnpublishedItem', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\MP\US\Insights\GetUnpublishedItem';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                $contentType = $response->getHeader('Content-Type')[0] ?? '';
                if ($returnType !== 'string') {
                    $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\US\Insights\GetUnpublishedItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation getUnpublishedItemsAsync
     *
     * Unpublished Items
     *
     * @param  string $fromDate Returns all unpublished items since the given date (required)
     * @param  string $unpublishedReasonCode Unpublished reason code (optional, default to 'all')
     * @param  string $limit The number of items to be returned. (optional, default to '20')
     * @param  string $offerLifecycleStatus The lifecycle status of an item describes where the item listing is in the overall lifecycle. Examples of allowed values are ACTIVE , ARCHIVED, RETIRED. (optional, default to 'all')
     * @param  string $marketTrending Filter the item list to return only items that are trending on Walmart.com (optional, default to 'true')
     * @param  string $itemsWithInventory Filter the item list to return only items that have inventory (optional, default to 'true')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUnpublishedItemsAsync(
        string $fromDate,
        ?string $unpublishedReasonCode = 'all',
        ?string $limit = '20',
        ?string $offerLifecycleStatus = 'all',
        ?string $marketTrending = 'true',
        ?string $itemsWithInventory = 'true'
    ): PromiseInterface {
        return $this->getUnpublishedItemsAsyncWithHttpInfo($fromDate, $unpublishedReasonCode, $limit, $offerLifecycleStatus, $marketTrending, $itemsWithInventory)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUnpublishedItemsAsyncWithHttpInfo
     *
     * Unpublished Items
     *
     * @param  string $fromDate Returns all unpublished items since the given date (required)
     * @param  string $unpublishedReasonCode Unpublished reason code (optional, default to 'all')
     * @param  string $limit The number of items to be returned. (optional, default to '20')
     * @param  string $offerLifecycleStatus The lifecycle status of an item describes where the item listing is in the overall lifecycle. Examples of allowed values are ACTIVE , ARCHIVED, RETIRED. (optional, default to 'all')
     * @param  string $marketTrending Filter the item list to return only items that are trending on Walmart.com (optional, default to 'true')
     * @param  string $itemsWithInventory Filter the item list to return only items that have inventory (optional, default to 'true')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function getUnpublishedItemsAsyncWithHttpInfo(
        string $fromDate,
        ?string $unpublishedReasonCode = 'all',
        ?string $limit = '20',
        ?string $offerLifecycleStatus = 'all',
        ?string $marketTrending = 'true',
        ?string $itemsWithInventory = 'true',
    ): PromiseInterface {
        $returnType = '\Walmart\Models\MP\US\Insights\GetUnpublishedItem';
        $request = $this->getUnpublishedItemsRequest($fromDate, $unpublishedReasonCode, $limit, $offerLifecycleStatus, $marketTrending, $itemsWithInventory);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUnpublishedItems'
     *
     * @param  string $fromDate Returns all unpublished items since the given date (required)
     * @param  string $unpublishedReasonCode Unpublished reason code (optional, default to 'all')
     * @param  string $limit The number of items to be returned. (optional, default to '20')
     * @param  string $offerLifecycleStatus The lifecycle status of an item describes where the item listing is in the overall lifecycle. Examples of allowed values are ACTIVE , ARCHIVED, RETIRED. (optional, default to 'all')
     * @param  string $marketTrending Filter the item list to return only items that are trending on Walmart.com (optional, default to 'true')
     * @param  string $itemsWithInventory Filter the item list to return only items that have inventory (optional, default to 'true')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getUnpublishedItemsRequest(
        string $fromDate,
        ?string $unpublishedReasonCode = 'all',
        ?string $limit = '20',
        ?string $offerLifecycleStatus = 'all',
        ?string $marketTrending = 'true',
        ?string $itemsWithInventory = 'true',
    ): Request {
        $contentType = self::contentTypes['getUnpublishedItems'];

        // verify the required parameter 'fromDate' is set
        if ($fromDate === null || (is_array($fromDate) && count($fromDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fromDate when calling getUnpublishedItems'
            );
        }
        $resourcePath = '/v3/insights/items/unpublished/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $method = 'GET';

        // query params
        $queryParams = array_merge(
            ObjectSerializer::toQueryValue(
                $unpublishedReasonCode,
                'unpublishedReasonCode', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $fromDate,
                'fromDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                true // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $limit,
                'limit', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $offerLifecycleStatus,
                'offerLifecycleStatus', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $marketTrending,
                'marketTrending', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $itemsWithInventory,
                'itemsWithInventory', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
        );

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $query = ObjectSerializer::buildQuery($queryParams);
        $requestInfo = [
            'path' => $resourcePath,
            'method' => $method,
            'timestamp' => $defaultHeaders['WM_SEC.TIMESTAMP'],
            'query' => $query,
        ];

        // this endpoint requires Bearer authentication (access token)
        $token = $this->config->getAccessToken();
        if ($token) {
            $headers['WM_SEC.ACCESS_TOKEN'] = $token->accessToken;
        }

        $operationHost = $this->config->getHost();
        return new Request(
            $method,
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation itemsDetailsForListing
     *
     * Item Listing Quality Details
     *
     * @param  \Walmart\Models\MP\US\Insights\ItemDetailsLQRequestPayload $itemDetailsLQRequestPayload Request payload (required)
     * @param  string $limit Specify number of items to return. If no limit is specified, API returns 200 items by default. (optional, default to '200')
     * @param  string $nextCursor Specify pagination for long list of items. (optional)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\Insights\ItemDetailsLQResponsePayload
     */
    public function itemsDetailsForListing(
        \Walmart\Models\MP\US\Insights\ItemDetailsLQRequestPayload $itemDetailsLQRequestPayload,
        ?string $limit = '200',
        ?string $nextCursor = null
    ): \Walmart\Models\MP\US\Insights\ItemDetailsLQResponsePayload {
        return $this->itemsDetailsForListingWithHttpInfo($itemDetailsLQRequestPayload, $limit, $nextCursor);
    }

    /**
     * Operation itemsDetailsForListingWithHttpInfo
     *
     * Item Listing Quality Details
     *
     * @param  \Walmart\Models\MP\US\Insights\ItemDetailsLQRequestPayload $itemDetailsLQRequestPayload Request payload (required)
     * @param  string $limit Specify number of items to return. If no limit is specified, API returns 200 items by default. (optional, default to '200')
     * @param  string $nextCursor Specify pagination for long list of items. (optional)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\US\Insights\ItemDetailsLQResponsePayload
     */
    protected function itemsDetailsForListingWithHttpInfo(
        \Walmart\Models\MP\US\Insights\ItemDetailsLQRequestPayload $itemDetailsLQRequestPayload,
        ?string $limit = '200',
        ?string $nextCursor = null,
    ): \Walmart\Models\MP\US\Insights\ItemDetailsLQResponsePayload {
        $request = $this->itemsDetailsForListingRequest($itemDetailsLQRequestPayload, $limit, $nextCursor);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\MP\US\Insights\ItemDetailsLQResponsePayload' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        $contentType = $response->getHeader('Content-Type')[0] ?? '';
                        if ('\Walmart\Models\MP\US\Insights\ItemDetailsLQResponsePayload' !== 'string') {
                            $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\US\Insights\ItemDetailsLQResponsePayload', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\MP\US\Insights\ItemDetailsLQResponsePayload';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                $contentType = $response->getHeader('Content-Type')[0] ?? '';
                if ($returnType !== 'string') {
                    $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\US\Insights\ItemDetailsLQResponsePayload',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation itemsDetailsForListingAsync
     *
     * Item Listing Quality Details
     *
     * @param  \Walmart\Models\MP\US\Insights\ItemDetailsLQRequestPayload $itemDetailsLQRequestPayload Request payload (required)
     * @param  string $limit Specify number of items to return. If no limit is specified, API returns 200 items by default. (optional, default to '200')
     * @param  string $nextCursor Specify pagination for long list of items. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function itemsDetailsForListingAsync(
        \Walmart\Models\MP\US\Insights\ItemDetailsLQRequestPayload $itemDetailsLQRequestPayload,
        ?string $limit = '200',
        ?string $nextCursor = null
    ): PromiseInterface {
        return $this->itemsDetailsForListingAsyncWithHttpInfo($itemDetailsLQRequestPayload, $limit, $nextCursor)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation itemsDetailsForListingAsyncWithHttpInfo
     *
     * Item Listing Quality Details
     *
     * @param  \Walmart\Models\MP\US\Insights\ItemDetailsLQRequestPayload $itemDetailsLQRequestPayload Request payload (required)
     * @param  string $limit Specify number of items to return. If no limit is specified, API returns 200 items by default. (optional, default to '200')
     * @param  string $nextCursor Specify pagination for long list of items. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function itemsDetailsForListingAsyncWithHttpInfo(
        \Walmart\Models\MP\US\Insights\ItemDetailsLQRequestPayload $itemDetailsLQRequestPayload,
        ?string $limit = '200',
        ?string $nextCursor = null,
    ): PromiseInterface {
        $returnType = '\Walmart\Models\MP\US\Insights\ItemDetailsLQResponsePayload';
        $request = $this->itemsDetailsForListingRequest($itemDetailsLQRequestPayload, $limit, $nextCursor);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'itemsDetailsForListing'
     *
     * @param  \Walmart\Models\MP\US\Insights\ItemDetailsLQRequestPayload $itemDetailsLQRequestPayload Request payload (required)
     * @param  string $limit Specify number of items to return. If no limit is specified, API returns 200 items by default. (optional, default to '200')
     * @param  string $nextCursor Specify pagination for long list of items. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function itemsDetailsForListingRequest(
        \Walmart\Models\MP\US\Insights\ItemDetailsLQRequestPayload $itemDetailsLQRequestPayload,
        ?string $limit = '200',
        ?string $nextCursor = null,
    ): Request {
        $contentType = self::contentTypes['itemsDetailsForListing'];

        // verify the required parameter 'itemDetailsLQRequestPayload' is set
        if ($itemDetailsLQRequestPayload === null || (is_array($itemDetailsLQRequestPayload) && count($itemDetailsLQRequestPayload) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $itemDetailsLQRequestPayload when calling itemsDetailsForListing'
            );
        }
        $resourcePath = '/v3/insights/items/listingQuality/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $method = 'POST';

        // query params
        $queryParams = array_merge(
            ObjectSerializer::toQueryValue(
                $limit,
                'limit', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $nextCursor,
                'nextCursor', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
        );

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // for model (json/xml)
        if (isset($itemDetailsLQRequestPayload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($itemDetailsLQRequestPayload));
            } else {
                $httpBody = $itemDetailsLQRequestPayload;
            }
        } else if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $query = ObjectSerializer::buildQuery($queryParams);
        $requestInfo = [
            'path' => $resourcePath,
            'method' => $method,
            'timestamp' => $defaultHeaders['WM_SEC.TIMESTAMP'],
            'query' => $query,
        ];

        // this endpoint requires Bearer authentication (access token)
        $token = $this->config->getAccessToken();
        if ($token) {
            $headers['WM_SEC.ACCESS_TOKEN'] = $token->accessToken;
        }

        $operationHost = $this->config->getHost();
        return new Request(
            $method,
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }
}

