<?php

/**
 * OrdersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 */

/**
 * Order Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Apis\MP\CA;

use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use Walmart\Apis\BaseApi;
use Walmart\ApiException;
use Walmart\ObjectSerializer;

/**
 * OrdersApi Class Doc Comment
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class OrdersApi extends BaseApi
{
    /**
     * @var string[] $contentTypes
     */
    public const contentTypes = [
        'acknowledgeOrdersCA' => 'application/json',
        'cancelOrderLinesCA' => 'application/xml',
        'getAllOrders' => 'application/json',
        'getAllReleasedOrders' => 'application/json',
        'getAllWFSOrders' => 'application/json',
        'getAnOrder' => 'application/json',
        'refundOrderLinesCA' => 'application/xml',
        'shippingUpdatesCA' => 'application/xml',
    ];

    /**
     * Operation acknowledgeOrdersCA
     *
     * Acknowledge Orders
     *
     * @param  string $purchaseOrderId The purchase order ID (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\CA\Orders\Order
     */
    public function acknowledgeOrdersCA(
        string $purchaseOrderId
    ): \Walmart\Models\MP\CA\Orders\Order {
        return $this->acknowledgeOrdersCAWithHttpInfo($purchaseOrderId);
    }

    /**
     * Operation acknowledgeOrdersCAWithHttpInfo
     *
     * Acknowledge Orders
     *
     * @param  string $purchaseOrderId The purchase order ID (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\CA\Orders\Order
     */
    protected function acknowledgeOrdersCAWithHttpInfo(
        string $purchaseOrderId,
    ): \Walmart\Models\MP\CA\Orders\Order {
        $request = $this->acknowledgeOrdersCARequest($purchaseOrderId);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\MP\CA\Orders\Order' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        $contentType = $response->getHeader('Content-Type')[0] ?? '';
                        if ('\Walmart\Models\MP\CA\Orders\Order' !== 'string') {
                            $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\CA\Orders\Order', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\MP\CA\Orders\Order';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                $contentType = $response->getHeader('Content-Type')[0] ?? '';
                if ($returnType !== 'string') {
                    $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\CA\Orders\Order',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation acknowledgeOrdersCAAsync
     *
     * Acknowledge Orders
     *
     * @param  string $purchaseOrderId The purchase order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acknowledgeOrdersCAAsync(
        string $purchaseOrderId
    ): PromiseInterface {
        return $this->acknowledgeOrdersCAAsyncWithHttpInfo($purchaseOrderId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation acknowledgeOrdersCAAsyncWithHttpInfo
     *
     * Acknowledge Orders
     *
     * @param  string $purchaseOrderId The purchase order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function acknowledgeOrdersCAAsyncWithHttpInfo(
        string $purchaseOrderId,
    ): PromiseInterface {
        $returnType = '\Walmart\Models\MP\CA\Orders\Order';
        $request = $this->acknowledgeOrdersCARequest($purchaseOrderId);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'acknowledgeOrdersCA'
     *
     * @param  string $purchaseOrderId The purchase order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function acknowledgeOrdersCARequest(
        string $purchaseOrderId,
    ): Request {
        $contentType = self::contentTypes['acknowledgeOrdersCA'];

        // verify the required parameter 'purchaseOrderId' is set
        if ($purchaseOrderId === null || (is_array($purchaseOrderId) && count($purchaseOrderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchaseOrderId when calling acknowledgeOrdersCA'
            );
        }
        $resourcePath = '/v3/ca/orders/{purchaseOrderId}/acknowledge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $method = 'POST';

        // path params
        if ($purchaseOrderId !== null) {
            $resourcePath = str_replace(
                '{' . 'purchaseOrderId' . '}',
                ObjectSerializer::toPathValue($purchaseOrderId),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/xml'],
            $contentType,
            $multipart
        );

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $query = ObjectSerializer::buildQuery($queryParams);
        $requestInfo = [
            'path' => $resourcePath,
            'method' => $method,
            'timestamp' => $defaultHeaders['WM_SEC.TIMESTAMP'],
            'query' => $query,
        ];

        $signatureApiKey = $this->config->getApiKey('signature', $requestInfo);
        if ($signatureApiKey !== null) {
            $headers['WM_SEC.AUTH_SIGNATURE'] = $signatureApiKey;
        }

        $consumerIdApiKey = $this->config->getApiKey('consumerId', $requestInfo);
        if ($consumerIdApiKey !== null) {
            $headers['WM_CONSUMER.ID'] = $consumerIdApiKey;
        }

        $channelTypeApiKey = $this->config->getApiKey('channelType', $requestInfo);
        if ($channelTypeApiKey !== null) {
            $headers['WM_CONSUMER.CHANNEL.TYPE'] = $channelTypeApiKey;
        }

        $operationHost = $this->config->getHost();
        return new Request(
            $method,
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelOrderLinesCA
     *
     * Cancel Order Lines
     *
     * @param  string $purchaseOrderId The purchase order ID (required)
     * @param  \Walmart\Models\MP\CA\Orders\OrderCancellation $orderCancellation File fields (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\CA\Orders\OrderCancellation
     */
    public function cancelOrderLinesCA(
        string $purchaseOrderId,
        \Walmart\Models\MP\CA\Orders\OrderCancellation $orderCancellation
    ): \Walmart\Models\MP\CA\Orders\OrderCancellation {
        return $this->cancelOrderLinesCAWithHttpInfo($purchaseOrderId, $orderCancellation);
    }

    /**
     * Operation cancelOrderLinesCAWithHttpInfo
     *
     * Cancel Order Lines
     *
     * @param  string $purchaseOrderId The purchase order ID (required)
     * @param  \Walmart\Models\MP\CA\Orders\OrderCancellation $orderCancellation File fields (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\CA\Orders\OrderCancellation
     */
    protected function cancelOrderLinesCAWithHttpInfo(
        string $purchaseOrderId,
        \Walmart\Models\MP\CA\Orders\OrderCancellation $orderCancellation,
    ): \Walmart\Models\MP\CA\Orders\OrderCancellation {
        $request = $this->cancelOrderLinesCARequest($purchaseOrderId, $orderCancellation);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\MP\CA\Orders\OrderCancellation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        $contentType = $response->getHeader('Content-Type')[0] ?? '';
                        if ('\Walmart\Models\MP\CA\Orders\OrderCancellation' !== 'string') {
                            $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\CA\Orders\OrderCancellation', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\MP\CA\Orders\OrderCancellation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                $contentType = $response->getHeader('Content-Type')[0] ?? '';
                if ($returnType !== 'string') {
                    $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\CA\Orders\OrderCancellation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation cancelOrderLinesCAAsync
     *
     * Cancel Order Lines
     *
     * @param  string $purchaseOrderId The purchase order ID (required)
     * @param  \Walmart\Models\MP\CA\Orders\OrderCancellation $orderCancellation File fields (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelOrderLinesCAAsync(
        string $purchaseOrderId,
        \Walmart\Models\MP\CA\Orders\OrderCancellation $orderCancellation
    ): PromiseInterface {
        return $this->cancelOrderLinesCAAsyncWithHttpInfo($purchaseOrderId, $orderCancellation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelOrderLinesCAAsyncWithHttpInfo
     *
     * Cancel Order Lines
     *
     * @param  string $purchaseOrderId The purchase order ID (required)
     * @param  \Walmart\Models\MP\CA\Orders\OrderCancellation $orderCancellation File fields (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function cancelOrderLinesCAAsyncWithHttpInfo(
        string $purchaseOrderId,
        \Walmart\Models\MP\CA\Orders\OrderCancellation $orderCancellation,
    ): PromiseInterface {
        $returnType = '\Walmart\Models\MP\CA\Orders\OrderCancellation';
        $request = $this->cancelOrderLinesCARequest($purchaseOrderId, $orderCancellation);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelOrderLinesCA'
     *
     * @param  string $purchaseOrderId The purchase order ID (required)
     * @param  \Walmart\Models\MP\CA\Orders\OrderCancellation $orderCancellation File fields (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelOrderLinesCARequest(
        string $purchaseOrderId,
        \Walmart\Models\MP\CA\Orders\OrderCancellation $orderCancellation,
    ): Request {
        $contentType = self::contentTypes['cancelOrderLinesCA'];

        // verify the required parameter 'purchaseOrderId' is set
        if ($purchaseOrderId === null || (is_array($purchaseOrderId) && count($purchaseOrderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchaseOrderId when calling cancelOrderLinesCA'
            );
        }
        // verify the required parameter 'orderCancellation' is set
        if ($orderCancellation === null || (is_array($orderCancellation) && count($orderCancellation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderCancellation when calling cancelOrderLinesCA'
            );
        }
        $resourcePath = '/v3/ca/orders/{purchaseOrderId}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $method = 'POST';

        // path params
        if ($purchaseOrderId !== null) {
            $resourcePath = str_replace(
                '{' . 'purchaseOrderId' . '}',
                ObjectSerializer::toPathValue($purchaseOrderId),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/xml'],
            $contentType,
            $multipart
        );

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // for model (json/xml)
        if (isset($orderCancellation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($orderCancellation));
            } else {
                $httpBody = $orderCancellation;
            }
        } else if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $query = ObjectSerializer::buildQuery($queryParams);
        $requestInfo = [
            'path' => $resourcePath,
            'method' => $method,
            'timestamp' => $defaultHeaders['WM_SEC.TIMESTAMP'],
            'query' => $query,
        ];

        $signatureApiKey = $this->config->getApiKey('signature', $requestInfo);
        if ($signatureApiKey !== null) {
            $headers['WM_SEC.AUTH_SIGNATURE'] = $signatureApiKey;
        }

        $consumerIdApiKey = $this->config->getApiKey('consumerId', $requestInfo);
        if ($consumerIdApiKey !== null) {
            $headers['WM_CONSUMER.ID'] = $consumerIdApiKey;
        }

        $channelTypeApiKey = $this->config->getApiKey('channelType', $requestInfo);
        if ($channelTypeApiKey !== null) {
            $headers['WM_CONSUMER.CHANNEL.TYPE'] = $channelTypeApiKey;
        }

        $operationHost = $this->config->getHost();
        return new Request(
            $method,
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllOrders
     *
     * Get all orders
     *
     * @param  string $createdStartDate Start Date for querying all purchase orders after that date. Use one of the following formats, based on UTC, ISO 8601. Date example: '2013-08-16' Timestamp example: '2013-08-16T10:30:15Z' (required)
     * @param  string $sku A seller-provided Product ID (optional)
     * @param  string $customerOrderId The customer order ID (optional)
     * @param  string $purchaseOrderId The purchase order ID. One customer may have multiple purchase orders. (optional)
     * @param  string $status Status may be specified to return orders of that type. Valid statuses are: Created, Acknowledged, Shipped, and Cancelled. (optional)
     * @param  string $createdEndDate Limits orders returned to those created before this createdEndDate. Two formats, based on ISO 8601, are allowed: UTC date or timestamp. Examples: '2016-08-16T10:30:30.155Z' or '2016-08-16'. (optional)
     * @param  string $fromExpectedShipDate Limits orders returned to those that have orderLines with an expected ship date after this fromExpectedShipDate. Format: YYYY-MM-DD (optional)
     * @param  string $toExpectedShipDate Limits orders returned to those that have orderLines with an expected ship date before this toExpectedShipDate. Format: YYYY-MM-DD (optional)
     * @param  string $limit The number of orders to be returned.Cannot be larger than 200. (optional)
     * @param  string $productInfo Provides the image URL and product weight in response, if available. This parameter must be boolean, e.g.: productInfo=true. (optional)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\CA\Orders\WFSOrdersListType
     */
    public function getAllOrders(
        string $createdStartDate,
        ?string $sku = null,
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null,
        ?string $status = null,
        ?string $createdEndDate = null,
        ?string $fromExpectedShipDate = null,
        ?string $toExpectedShipDate = null,
        ?string $limit = null,
        ?string $productInfo = null
    ): \Walmart\Models\MP\CA\Orders\WFSOrdersListType {
        return $this->getAllOrdersWithHttpInfo($createdStartDate, $sku, $customerOrderId, $purchaseOrderId, $status, $createdEndDate, $fromExpectedShipDate, $toExpectedShipDate, $limit, $productInfo);
    }

    /**
     * Operation getAllOrdersWithHttpInfo
     *
     * Get all orders
     *
     * @param  string $createdStartDate Start Date for querying all purchase orders after that date. Use one of the following formats, based on UTC, ISO 8601. Date example: '2013-08-16' Timestamp example: '2013-08-16T10:30:15Z' (required)
     * @param  string $sku A seller-provided Product ID (optional)
     * @param  string $customerOrderId The customer order ID (optional)
     * @param  string $purchaseOrderId The purchase order ID. One customer may have multiple purchase orders. (optional)
     * @param  string $status Status may be specified to return orders of that type. Valid statuses are: Created, Acknowledged, Shipped, and Cancelled. (optional)
     * @param  string $createdEndDate Limits orders returned to those created before this createdEndDate. Two formats, based on ISO 8601, are allowed: UTC date or timestamp. Examples: '2016-08-16T10:30:30.155Z' or '2016-08-16'. (optional)
     * @param  string $fromExpectedShipDate Limits orders returned to those that have orderLines with an expected ship date after this fromExpectedShipDate. Format: YYYY-MM-DD (optional)
     * @param  string $toExpectedShipDate Limits orders returned to those that have orderLines with an expected ship date before this toExpectedShipDate. Format: YYYY-MM-DD (optional)
     * @param  string $limit The number of orders to be returned.Cannot be larger than 200. (optional)
     * @param  string $productInfo Provides the image URL and product weight in response, if available. This parameter must be boolean, e.g.: productInfo=true. (optional)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\CA\Orders\WFSOrdersListType
     */
    protected function getAllOrdersWithHttpInfo(
        string $createdStartDate,
        ?string $sku = null,
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null,
        ?string $status = null,
        ?string $createdEndDate = null,
        ?string $fromExpectedShipDate = null,
        ?string $toExpectedShipDate = null,
        ?string $limit = null,
        ?string $productInfo = null,
    ): \Walmart\Models\MP\CA\Orders\WFSOrdersListType {
        $request = $this->getAllOrdersRequest($createdStartDate, $sku, $customerOrderId, $purchaseOrderId, $status, $createdEndDate, $fromExpectedShipDate, $toExpectedShipDate, $limit, $productInfo);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\MP\CA\Orders\WFSOrdersListType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        $contentType = $response->getHeader('Content-Type')[0] ?? '';
                        if ('\Walmart\Models\MP\CA\Orders\WFSOrdersListType' !== 'string') {
                            $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\CA\Orders\WFSOrdersListType', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\MP\CA\Orders\WFSOrdersListType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                $contentType = $response->getHeader('Content-Type')[0] ?? '';
                if ($returnType !== 'string') {
                    $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\CA\Orders\WFSOrdersListType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation getAllOrdersAsync
     *
     * Get all orders
     *
     * @param  string $createdStartDate Start Date for querying all purchase orders after that date. Use one of the following formats, based on UTC, ISO 8601. Date example: '2013-08-16' Timestamp example: '2013-08-16T10:30:15Z' (required)
     * @param  string $sku A seller-provided Product ID (optional)
     * @param  string $customerOrderId The customer order ID (optional)
     * @param  string $purchaseOrderId The purchase order ID. One customer may have multiple purchase orders. (optional)
     * @param  string $status Status may be specified to return orders of that type. Valid statuses are: Created, Acknowledged, Shipped, and Cancelled. (optional)
     * @param  string $createdEndDate Limits orders returned to those created before this createdEndDate. Two formats, based on ISO 8601, are allowed: UTC date or timestamp. Examples: '2016-08-16T10:30:30.155Z' or '2016-08-16'. (optional)
     * @param  string $fromExpectedShipDate Limits orders returned to those that have orderLines with an expected ship date after this fromExpectedShipDate. Format: YYYY-MM-DD (optional)
     * @param  string $toExpectedShipDate Limits orders returned to those that have orderLines with an expected ship date before this toExpectedShipDate. Format: YYYY-MM-DD (optional)
     * @param  string $limit The number of orders to be returned.Cannot be larger than 200. (optional)
     * @param  string $productInfo Provides the image URL and product weight in response, if available. This parameter must be boolean, e.g.: productInfo=true. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllOrdersAsync(
        string $createdStartDate,
        ?string $sku = null,
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null,
        ?string $status = null,
        ?string $createdEndDate = null,
        ?string $fromExpectedShipDate = null,
        ?string $toExpectedShipDate = null,
        ?string $limit = null,
        ?string $productInfo = null
    ): PromiseInterface {
        return $this->getAllOrdersAsyncWithHttpInfo($createdStartDate, $sku, $customerOrderId, $purchaseOrderId, $status, $createdEndDate, $fromExpectedShipDate, $toExpectedShipDate, $limit, $productInfo)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllOrdersAsyncWithHttpInfo
     *
     * Get all orders
     *
     * @param  string $createdStartDate Start Date for querying all purchase orders after that date. Use one of the following formats, based on UTC, ISO 8601. Date example: '2013-08-16' Timestamp example: '2013-08-16T10:30:15Z' (required)
     * @param  string $sku A seller-provided Product ID (optional)
     * @param  string $customerOrderId The customer order ID (optional)
     * @param  string $purchaseOrderId The purchase order ID. One customer may have multiple purchase orders. (optional)
     * @param  string $status Status may be specified to return orders of that type. Valid statuses are: Created, Acknowledged, Shipped, and Cancelled. (optional)
     * @param  string $createdEndDate Limits orders returned to those created before this createdEndDate. Two formats, based on ISO 8601, are allowed: UTC date or timestamp. Examples: '2016-08-16T10:30:30.155Z' or '2016-08-16'. (optional)
     * @param  string $fromExpectedShipDate Limits orders returned to those that have orderLines with an expected ship date after this fromExpectedShipDate. Format: YYYY-MM-DD (optional)
     * @param  string $toExpectedShipDate Limits orders returned to those that have orderLines with an expected ship date before this toExpectedShipDate. Format: YYYY-MM-DD (optional)
     * @param  string $limit The number of orders to be returned.Cannot be larger than 200. (optional)
     * @param  string $productInfo Provides the image URL and product weight in response, if available. This parameter must be boolean, e.g.: productInfo=true. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function getAllOrdersAsyncWithHttpInfo(
        string $createdStartDate,
        ?string $sku = null,
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null,
        ?string $status = null,
        ?string $createdEndDate = null,
        ?string $fromExpectedShipDate = null,
        ?string $toExpectedShipDate = null,
        ?string $limit = null,
        ?string $productInfo = null,
    ): PromiseInterface {
        $returnType = '\Walmart\Models\MP\CA\Orders\WFSOrdersListType';
        $request = $this->getAllOrdersRequest($createdStartDate, $sku, $customerOrderId, $purchaseOrderId, $status, $createdEndDate, $fromExpectedShipDate, $toExpectedShipDate, $limit, $productInfo);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllOrders'
     *
     * @param  string $createdStartDate Start Date for querying all purchase orders after that date. Use one of the following formats, based on UTC, ISO 8601. Date example: '2013-08-16' Timestamp example: '2013-08-16T10:30:15Z' (required)
     * @param  string $sku A seller-provided Product ID (optional)
     * @param  string $customerOrderId The customer order ID (optional)
     * @param  string $purchaseOrderId The purchase order ID. One customer may have multiple purchase orders. (optional)
     * @param  string $status Status may be specified to return orders of that type. Valid statuses are: Created, Acknowledged, Shipped, and Cancelled. (optional)
     * @param  string $createdEndDate Limits orders returned to those created before this createdEndDate. Two formats, based on ISO 8601, are allowed: UTC date or timestamp. Examples: '2016-08-16T10:30:30.155Z' or '2016-08-16'. (optional)
     * @param  string $fromExpectedShipDate Limits orders returned to those that have orderLines with an expected ship date after this fromExpectedShipDate. Format: YYYY-MM-DD (optional)
     * @param  string $toExpectedShipDate Limits orders returned to those that have orderLines with an expected ship date before this toExpectedShipDate. Format: YYYY-MM-DD (optional)
     * @param  string $limit The number of orders to be returned.Cannot be larger than 200. (optional)
     * @param  string $productInfo Provides the image URL and product weight in response, if available. This parameter must be boolean, e.g.: productInfo=true. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllOrdersRequest(
        string $createdStartDate,
        ?string $sku = null,
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null,
        ?string $status = null,
        ?string $createdEndDate = null,
        ?string $fromExpectedShipDate = null,
        ?string $toExpectedShipDate = null,
        ?string $limit = null,
        ?string $productInfo = null,
    ): Request {
        $contentType = self::contentTypes['getAllOrders'];

        // verify the required parameter 'createdStartDate' is set
        if ($createdStartDate === null || (is_array($createdStartDate) && count($createdStartDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createdStartDate when calling getAllOrders'
            );
        }
        $resourcePath = '/v3/ca/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $method = 'GET';

        // query params
        $queryParams = array_merge(
            ObjectSerializer::toQueryValue(
                $sku,
                'sku', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $customerOrderId,
                'customerOrderId', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $purchaseOrderId,
                'purchaseOrderId', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $status,
                'status', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $createdStartDate,
                'createdStartDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                true // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $createdEndDate,
                'createdEndDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $fromExpectedShipDate,
                'fromExpectedShipDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $toExpectedShipDate,
                'toExpectedShipDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $limit,
                'limit', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $productInfo,
                'productInfo', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
        );

        $headers = $this->headerSelector->selectHeaders(
            ['application/xml'],
            $contentType,
            $multipart
        );

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $query = ObjectSerializer::buildQuery($queryParams);
        $requestInfo = [
            'path' => $resourcePath,
            'method' => $method,
            'timestamp' => $defaultHeaders['WM_SEC.TIMESTAMP'],
            'query' => $query,
        ];

        $signatureApiKey = $this->config->getApiKey('signature', $requestInfo);
        if ($signatureApiKey !== null) {
            $headers['WM_SEC.AUTH_SIGNATURE'] = $signatureApiKey;
        }

        $consumerIdApiKey = $this->config->getApiKey('consumerId', $requestInfo);
        if ($consumerIdApiKey !== null) {
            $headers['WM_CONSUMER.ID'] = $consumerIdApiKey;
        }

        $channelTypeApiKey = $this->config->getApiKey('channelType', $requestInfo);
        if ($channelTypeApiKey !== null) {
            $headers['WM_CONSUMER.CHANNEL.TYPE'] = $channelTypeApiKey;
        }

        $operationHost = $this->config->getHost();
        return new Request(
            $method,
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllReleasedOrders
     *
     * Get all released orders
     *
     * @param  string $createdStartDate Start Date for querying all purchase orders after this date. Use epoch time format in seconds. (optional)
     * @param  string $createdEndDate End Date for querying all purchase orders after this date. Use epoch time format in seconds. (optional)
     * @param  string $limit The number of orders to be returned. Cannot be larger than 200. (optional, default to '10')
     * @param  string $productInfo Provides the image URL and product weight in response, if available. This parameter must be boolean, e.g.: productInfo=true. (optional)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\CA\Orders\WFSOrdersListType
     */
    public function getAllReleasedOrders(
        ?string $createdStartDate = null,
        ?string $createdEndDate = null,
        ?string $limit = '10',
        ?string $productInfo = null
    ): \Walmart\Models\MP\CA\Orders\WFSOrdersListType {
        return $this->getAllReleasedOrdersWithHttpInfo($createdStartDate, $createdEndDate, $limit, $productInfo);
    }

    /**
     * Operation getAllReleasedOrdersWithHttpInfo
     *
     * Get all released orders
     *
     * @param  string $createdStartDate Start Date for querying all purchase orders after this date. Use epoch time format in seconds. (optional)
     * @param  string $createdEndDate End Date for querying all purchase orders after this date. Use epoch time format in seconds. (optional)
     * @param  string $limit The number of orders to be returned. Cannot be larger than 200. (optional, default to '10')
     * @param  string $productInfo Provides the image URL and product weight in response, if available. This parameter must be boolean, e.g.: productInfo=true. (optional)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\CA\Orders\WFSOrdersListType
     */
    protected function getAllReleasedOrdersWithHttpInfo(
        ?string $createdStartDate = null,
        ?string $createdEndDate = null,
        ?string $limit = '10',
        ?string $productInfo = null,
    ): \Walmart\Models\MP\CA\Orders\WFSOrdersListType {
        $request = $this->getAllReleasedOrdersRequest($createdStartDate, $createdEndDate, $limit, $productInfo);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\MP\CA\Orders\WFSOrdersListType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        $contentType = $response->getHeader('Content-Type')[0] ?? '';
                        if ('\Walmart\Models\MP\CA\Orders\WFSOrdersListType' !== 'string') {
                            $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\CA\Orders\WFSOrdersListType', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\MP\CA\Orders\WFSOrdersListType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                $contentType = $response->getHeader('Content-Type')[0] ?? '';
                if ($returnType !== 'string') {
                    $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\CA\Orders\WFSOrdersListType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation getAllReleasedOrdersAsync
     *
     * Get all released orders
     *
     * @param  string $createdStartDate Start Date for querying all purchase orders after this date. Use epoch time format in seconds. (optional)
     * @param  string $createdEndDate End Date for querying all purchase orders after this date. Use epoch time format in seconds. (optional)
     * @param  string $limit The number of orders to be returned. Cannot be larger than 200. (optional, default to '10')
     * @param  string $productInfo Provides the image URL and product weight in response, if available. This parameter must be boolean, e.g.: productInfo=true. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllReleasedOrdersAsync(
        ?string $createdStartDate = null,
        ?string $createdEndDate = null,
        ?string $limit = '10',
        ?string $productInfo = null
    ): PromiseInterface {
        return $this->getAllReleasedOrdersAsyncWithHttpInfo($createdStartDate, $createdEndDate, $limit, $productInfo)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllReleasedOrdersAsyncWithHttpInfo
     *
     * Get all released orders
     *
     * @param  string $createdStartDate Start Date for querying all purchase orders after this date. Use epoch time format in seconds. (optional)
     * @param  string $createdEndDate End Date for querying all purchase orders after this date. Use epoch time format in seconds. (optional)
     * @param  string $limit The number of orders to be returned. Cannot be larger than 200. (optional, default to '10')
     * @param  string $productInfo Provides the image URL and product weight in response, if available. This parameter must be boolean, e.g.: productInfo=true. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function getAllReleasedOrdersAsyncWithHttpInfo(
        ?string $createdStartDate = null,
        ?string $createdEndDate = null,
        ?string $limit = '10',
        ?string $productInfo = null,
    ): PromiseInterface {
        $returnType = '\Walmart\Models\MP\CA\Orders\WFSOrdersListType';
        $request = $this->getAllReleasedOrdersRequest($createdStartDate, $createdEndDate, $limit, $productInfo);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllReleasedOrders'
     *
     * @param  string $createdStartDate Start Date for querying all purchase orders after this date. Use epoch time format in seconds. (optional)
     * @param  string $createdEndDate End Date for querying all purchase orders after this date. Use epoch time format in seconds. (optional)
     * @param  string $limit The number of orders to be returned. Cannot be larger than 200. (optional, default to '10')
     * @param  string $productInfo Provides the image URL and product weight in response, if available. This parameter must be boolean, e.g.: productInfo=true. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllReleasedOrdersRequest(
        ?string $createdStartDate = null,
        ?string $createdEndDate = null,
        ?string $limit = '10',
        ?string $productInfo = null,
    ): Request {
        $contentType = self::contentTypes['getAllReleasedOrders'];

        $resourcePath = '/v3/ca/orders/released';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $method = 'GET';

        // query params
        $queryParams = array_merge(
            ObjectSerializer::toQueryValue(
                $createdStartDate,
                'createdStartDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $createdEndDate,
                'createdEndDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $limit,
                'limit', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $productInfo,
                'productInfo', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
        );

        $headers = $this->headerSelector->selectHeaders(
            ['application/xml'],
            $contentType,
            $multipart
        );

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $query = ObjectSerializer::buildQuery($queryParams);
        $requestInfo = [
            'path' => $resourcePath,
            'method' => $method,
            'timestamp' => $defaultHeaders['WM_SEC.TIMESTAMP'],
            'query' => $query,
        ];

        $signatureApiKey = $this->config->getApiKey('signature', $requestInfo);
        if ($signatureApiKey !== null) {
            $headers['WM_SEC.AUTH_SIGNATURE'] = $signatureApiKey;
        }

        $consumerIdApiKey = $this->config->getApiKey('consumerId', $requestInfo);
        if ($consumerIdApiKey !== null) {
            $headers['WM_CONSUMER.ID'] = $consumerIdApiKey;
        }

        $channelTypeApiKey = $this->config->getApiKey('channelType', $requestInfo);
        if ($channelTypeApiKey !== null) {
            $headers['WM_CONSUMER.CHANNEL.TYPE'] = $channelTypeApiKey;
        }

        $operationHost = $this->config->getHost();
        return new Request(
            $method,
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllWFSOrders
     *
     * Get all WFS orders
     *
     * @param  string $createdStartDate Start Date for querying all purchase orders after that date. Use one of the following formats, based on UTC, ISO 8601. Date example: '2013-08-16' Timestamp example: '2013-08-16T10:30:15Z' (required)
     * @param  string $customerOrderId The customer order ID (optional)
     * @param  string $status Status may be specified to return orders of that type. Valid statuses are: Created, Shipped and Cancelled. (optional)
     * @param  string $createdEndDate Limits orders returned to those created before this createdEndDate. Two formats, based on ISO 8601, are allowed: UTC date or timestamp. Examples: '2016-08-16T10:30:30.155Z' or '2016-08-16'. (optional)
     * @param  string $limit The number of orders to be returned.Cannot be larger than 200. (optional)
     * @param  string $offset Starting order offset for the current page (optional)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\CA\Orders\WFSOrdersListType
     */
    public function getAllWFSOrders(
        string $createdStartDate,
        ?string $customerOrderId = null,
        ?string $status = null,
        ?string $createdEndDate = null,
        ?string $limit = null,
        ?string $offset = null
    ): \Walmart\Models\MP\CA\Orders\WFSOrdersListType {
        return $this->getAllWFSOrdersWithHttpInfo($createdStartDate, $customerOrderId, $status, $createdEndDate, $limit, $offset);
    }

    /**
     * Operation getAllWFSOrdersWithHttpInfo
     *
     * Get all WFS orders
     *
     * @param  string $createdStartDate Start Date for querying all purchase orders after that date. Use one of the following formats, based on UTC, ISO 8601. Date example: '2013-08-16' Timestamp example: '2013-08-16T10:30:15Z' (required)
     * @param  string $customerOrderId The customer order ID (optional)
     * @param  string $status Status may be specified to return orders of that type. Valid statuses are: Created, Shipped and Cancelled. (optional)
     * @param  string $createdEndDate Limits orders returned to those created before this createdEndDate. Two formats, based on ISO 8601, are allowed: UTC date or timestamp. Examples: '2016-08-16T10:30:30.155Z' or '2016-08-16'. (optional)
     * @param  string $limit The number of orders to be returned.Cannot be larger than 200. (optional)
     * @param  string $offset Starting order offset for the current page (optional)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\CA\Orders\WFSOrdersListType
     */
    protected function getAllWFSOrdersWithHttpInfo(
        string $createdStartDate,
        ?string $customerOrderId = null,
        ?string $status = null,
        ?string $createdEndDate = null,
        ?string $limit = null,
        ?string $offset = null,
    ): \Walmart\Models\MP\CA\Orders\WFSOrdersListType {
        $request = $this->getAllWFSOrdersRequest($createdStartDate, $customerOrderId, $status, $createdEndDate, $limit, $offset);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\MP\CA\Orders\WFSOrdersListType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        $contentType = $response->getHeader('Content-Type')[0] ?? '';
                        if ('\Walmart\Models\MP\CA\Orders\WFSOrdersListType' !== 'string') {
                            $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\CA\Orders\WFSOrdersListType', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\MP\CA\Orders\WFSOrdersListType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                $contentType = $response->getHeader('Content-Type')[0] ?? '';
                if ($returnType !== 'string') {
                    $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\CA\Orders\WFSOrdersListType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation getAllWFSOrdersAsync
     *
     * Get all WFS orders
     *
     * @param  string $createdStartDate Start Date for querying all purchase orders after that date. Use one of the following formats, based on UTC, ISO 8601. Date example: '2013-08-16' Timestamp example: '2013-08-16T10:30:15Z' (required)
     * @param  string $customerOrderId The customer order ID (optional)
     * @param  string $status Status may be specified to return orders of that type. Valid statuses are: Created, Shipped and Cancelled. (optional)
     * @param  string $createdEndDate Limits orders returned to those created before this createdEndDate. Two formats, based on ISO 8601, are allowed: UTC date or timestamp. Examples: '2016-08-16T10:30:30.155Z' or '2016-08-16'. (optional)
     * @param  string $limit The number of orders to be returned.Cannot be larger than 200. (optional)
     * @param  string $offset Starting order offset for the current page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllWFSOrdersAsync(
        string $createdStartDate,
        ?string $customerOrderId = null,
        ?string $status = null,
        ?string $createdEndDate = null,
        ?string $limit = null,
        ?string $offset = null
    ): PromiseInterface {
        return $this->getAllWFSOrdersAsyncWithHttpInfo($createdStartDate, $customerOrderId, $status, $createdEndDate, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllWFSOrdersAsyncWithHttpInfo
     *
     * Get all WFS orders
     *
     * @param  string $createdStartDate Start Date for querying all purchase orders after that date. Use one of the following formats, based on UTC, ISO 8601. Date example: '2013-08-16' Timestamp example: '2013-08-16T10:30:15Z' (required)
     * @param  string $customerOrderId The customer order ID (optional)
     * @param  string $status Status may be specified to return orders of that type. Valid statuses are: Created, Shipped and Cancelled. (optional)
     * @param  string $createdEndDate Limits orders returned to those created before this createdEndDate. Two formats, based on ISO 8601, are allowed: UTC date or timestamp. Examples: '2016-08-16T10:30:30.155Z' or '2016-08-16'. (optional)
     * @param  string $limit The number of orders to be returned.Cannot be larger than 200. (optional)
     * @param  string $offset Starting order offset for the current page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function getAllWFSOrdersAsyncWithHttpInfo(
        string $createdStartDate,
        ?string $customerOrderId = null,
        ?string $status = null,
        ?string $createdEndDate = null,
        ?string $limit = null,
        ?string $offset = null,
    ): PromiseInterface {
        $returnType = '\Walmart\Models\MP\CA\Orders\WFSOrdersListType';
        $request = $this->getAllWFSOrdersRequest($createdStartDate, $customerOrderId, $status, $createdEndDate, $limit, $offset);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllWFSOrders'
     *
     * @param  string $createdStartDate Start Date for querying all purchase orders after that date. Use one of the following formats, based on UTC, ISO 8601. Date example: '2013-08-16' Timestamp example: '2013-08-16T10:30:15Z' (required)
     * @param  string $customerOrderId The customer order ID (optional)
     * @param  string $status Status may be specified to return orders of that type. Valid statuses are: Created, Shipped and Cancelled. (optional)
     * @param  string $createdEndDate Limits orders returned to those created before this createdEndDate. Two formats, based on ISO 8601, are allowed: UTC date or timestamp. Examples: '2016-08-16T10:30:30.155Z' or '2016-08-16'. (optional)
     * @param  string $limit The number of orders to be returned.Cannot be larger than 200. (optional)
     * @param  string $offset Starting order offset for the current page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllWFSOrdersRequest(
        string $createdStartDate,
        ?string $customerOrderId = null,
        ?string $status = null,
        ?string $createdEndDate = null,
        ?string $limit = null,
        ?string $offset = null,
    ): Request {
        $contentType = self::contentTypes['getAllWFSOrders'];

        // verify the required parameter 'createdStartDate' is set
        if ($createdStartDate === null || (is_array($createdStartDate) && count($createdStartDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createdStartDate when calling getAllWFSOrders'
            );
        }
        $resourcePath = '/v3/ca/orders/wfs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $method = 'GET';

        // query params
        $queryParams = array_merge(
            ObjectSerializer::toQueryValue(
                $customerOrderId,
                'customerOrderId', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $status,
                'status', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $createdStartDate,
                'createdStartDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                true // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $createdEndDate,
                'createdEndDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $limit,
                'limit', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $offset,
                'offset', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
        );

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $query = ObjectSerializer::buildQuery($queryParams);
        $requestInfo = [
            'path' => $resourcePath,
            'method' => $method,
            'timestamp' => $defaultHeaders['WM_SEC.TIMESTAMP'],
            'query' => $query,
        ];

        $signatureApiKey = $this->config->getApiKey('signature', $requestInfo);
        if ($signatureApiKey !== null) {
            $headers['WM_SEC.AUTH_SIGNATURE'] = $signatureApiKey;
        }

        $consumerIdApiKey = $this->config->getApiKey('consumerId', $requestInfo);
        if ($consumerIdApiKey !== null) {
            $headers['WM_CONSUMER.ID'] = $consumerIdApiKey;
        }

        $channelTypeApiKey = $this->config->getApiKey('channelType', $requestInfo);
        if ($channelTypeApiKey !== null) {
            $headers['WM_CONSUMER.CHANNEL.TYPE'] = $channelTypeApiKey;
        }

        $operationHost = $this->config->getHost();
        return new Request(
            $method,
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAnOrder
     *
     * Get an order
     *
     * @param  string $purchaseOrderId The purchase order ID (required)
     * @param  string $productInfo Provides the image URL and product weight in response, if available. This parameter must be boolean, e.g.: productInfo=true. (optional)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\CA\Orders\Order
     */
    public function getAnOrder(
        string $purchaseOrderId,
        ?string $productInfo = null
    ): \Walmart\Models\MP\CA\Orders\Order {
        return $this->getAnOrderWithHttpInfo($purchaseOrderId, $productInfo);
    }

    /**
     * Operation getAnOrderWithHttpInfo
     *
     * Get an order
     *
     * @param  string $purchaseOrderId The purchase order ID (required)
     * @param  string $productInfo Provides the image URL and product weight in response, if available. This parameter must be boolean, e.g.: productInfo=true. (optional)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\CA\Orders\Order
     */
    protected function getAnOrderWithHttpInfo(
        string $purchaseOrderId,
        ?string $productInfo = null,
    ): \Walmart\Models\MP\CA\Orders\Order {
        $request = $this->getAnOrderRequest($purchaseOrderId, $productInfo);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\MP\CA\Orders\Order' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        $contentType = $response->getHeader('Content-Type')[0] ?? '';
                        if ('\Walmart\Models\MP\CA\Orders\Order' !== 'string') {
                            $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\CA\Orders\Order', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\MP\CA\Orders\Order';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                $contentType = $response->getHeader('Content-Type')[0] ?? '';
                if ($returnType !== 'string') {
                    $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\CA\Orders\Order',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation getAnOrderAsync
     *
     * Get an order
     *
     * @param  string $purchaseOrderId The purchase order ID (required)
     * @param  string $productInfo Provides the image URL and product weight in response, if available. This parameter must be boolean, e.g.: productInfo=true. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAnOrderAsync(
        string $purchaseOrderId,
        ?string $productInfo = null
    ): PromiseInterface {
        return $this->getAnOrderAsyncWithHttpInfo($purchaseOrderId, $productInfo)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAnOrderAsyncWithHttpInfo
     *
     * Get an order
     *
     * @param  string $purchaseOrderId The purchase order ID (required)
     * @param  string $productInfo Provides the image URL and product weight in response, if available. This parameter must be boolean, e.g.: productInfo=true. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function getAnOrderAsyncWithHttpInfo(
        string $purchaseOrderId,
        ?string $productInfo = null,
    ): PromiseInterface {
        $returnType = '\Walmart\Models\MP\CA\Orders\Order';
        $request = $this->getAnOrderRequest($purchaseOrderId, $productInfo);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAnOrder'
     *
     * @param  string $purchaseOrderId The purchase order ID (required)
     * @param  string $productInfo Provides the image URL and product weight in response, if available. This parameter must be boolean, e.g.: productInfo=true. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAnOrderRequest(
        string $purchaseOrderId,
        ?string $productInfo = null,
    ): Request {
        $contentType = self::contentTypes['getAnOrder'];

        // verify the required parameter 'purchaseOrderId' is set
        if ($purchaseOrderId === null || (is_array($purchaseOrderId) && count($purchaseOrderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchaseOrderId when calling getAnOrder'
            );
        }
        $resourcePath = '/v3/ca/orders/{purchaseOrderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $method = 'GET';

        // query params
        $queryParams = array_merge(
            ObjectSerializer::toQueryValue(
                $productInfo,
                'productInfo', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
        );

        // path params
        if ($purchaseOrderId !== null) {
            $resourcePath = str_replace(
                '{' . 'purchaseOrderId' . '}',
                ObjectSerializer::toPathValue($purchaseOrderId),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/xml'],
            $contentType,
            $multipart
        );

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $query = ObjectSerializer::buildQuery($queryParams);
        $requestInfo = [
            'path' => $resourcePath,
            'method' => $method,
            'timestamp' => $defaultHeaders['WM_SEC.TIMESTAMP'],
            'query' => $query,
        ];

        $signatureApiKey = $this->config->getApiKey('signature', $requestInfo);
        if ($signatureApiKey !== null) {
            $headers['WM_SEC.AUTH_SIGNATURE'] = $signatureApiKey;
        }

        $consumerIdApiKey = $this->config->getApiKey('consumerId', $requestInfo);
        if ($consumerIdApiKey !== null) {
            $headers['WM_CONSUMER.ID'] = $consumerIdApiKey;
        }

        $channelTypeApiKey = $this->config->getApiKey('channelType', $requestInfo);
        if ($channelTypeApiKey !== null) {
            $headers['WM_CONSUMER.CHANNEL.TYPE'] = $channelTypeApiKey;
        }

        $operationHost = $this->config->getHost();
        return new Request(
            $method,
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation refundOrderLinesCA
     *
     * Refund Order Lines
     *
     * @param  string $purchaseOrderId The purchase order ID (required)
     * @param  \Walmart\Models\MP\CA\Orders\OrderRefund $orderRefund File fields (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\CA\Orders\Order
     */
    public function refundOrderLinesCA(
        string $purchaseOrderId,
        \Walmart\Models\MP\CA\Orders\OrderRefund $orderRefund
    ): \Walmart\Models\MP\CA\Orders\Order {
        return $this->refundOrderLinesCAWithHttpInfo($purchaseOrderId, $orderRefund);
    }

    /**
     * Operation refundOrderLinesCAWithHttpInfo
     *
     * Refund Order Lines
     *
     * @param  string $purchaseOrderId The purchase order ID (required)
     * @param  \Walmart\Models\MP\CA\Orders\OrderRefund $orderRefund File fields (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\CA\Orders\Order
     */
    protected function refundOrderLinesCAWithHttpInfo(
        string $purchaseOrderId,
        \Walmart\Models\MP\CA\Orders\OrderRefund $orderRefund,
    ): \Walmart\Models\MP\CA\Orders\Order {
        $request = $this->refundOrderLinesCARequest($purchaseOrderId, $orderRefund);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\MP\CA\Orders\Order' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        $contentType = $response->getHeader('Content-Type')[0] ?? '';
                        if ('\Walmart\Models\MP\CA\Orders\Order' !== 'string') {
                            $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\CA\Orders\Order', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\MP\CA\Orders\Order';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                $contentType = $response->getHeader('Content-Type')[0] ?? '';
                if ($returnType !== 'string') {
                    $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\CA\Orders\Order',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation refundOrderLinesCAAsync
     *
     * Refund Order Lines
     *
     * @param  string $purchaseOrderId The purchase order ID (required)
     * @param  \Walmart\Models\MP\CA\Orders\OrderRefund $orderRefund File fields (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundOrderLinesCAAsync(
        string $purchaseOrderId,
        \Walmart\Models\MP\CA\Orders\OrderRefund $orderRefund
    ): PromiseInterface {
        return $this->refundOrderLinesCAAsyncWithHttpInfo($purchaseOrderId, $orderRefund)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refundOrderLinesCAAsyncWithHttpInfo
     *
     * Refund Order Lines
     *
     * @param  string $purchaseOrderId The purchase order ID (required)
     * @param  \Walmart\Models\MP\CA\Orders\OrderRefund $orderRefund File fields (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function refundOrderLinesCAAsyncWithHttpInfo(
        string $purchaseOrderId,
        \Walmart\Models\MP\CA\Orders\OrderRefund $orderRefund,
    ): PromiseInterface {
        $returnType = '\Walmart\Models\MP\CA\Orders\Order';
        $request = $this->refundOrderLinesCARequest($purchaseOrderId, $orderRefund);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'refundOrderLinesCA'
     *
     * @param  string $purchaseOrderId The purchase order ID (required)
     * @param  \Walmart\Models\MP\CA\Orders\OrderRefund $orderRefund File fields (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function refundOrderLinesCARequest(
        string $purchaseOrderId,
        \Walmart\Models\MP\CA\Orders\OrderRefund $orderRefund,
    ): Request {
        $contentType = self::contentTypes['refundOrderLinesCA'];

        // verify the required parameter 'purchaseOrderId' is set
        if ($purchaseOrderId === null || (is_array($purchaseOrderId) && count($purchaseOrderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchaseOrderId when calling refundOrderLinesCA'
            );
        }
        // verify the required parameter 'orderRefund' is set
        if ($orderRefund === null || (is_array($orderRefund) && count($orderRefund) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderRefund when calling refundOrderLinesCA'
            );
        }
        $resourcePath = '/v3/ca/orders/{purchaseOrderId}/refund';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $method = 'POST';

        // path params
        if ($purchaseOrderId !== null) {
            $resourcePath = str_replace(
                '{' . 'purchaseOrderId' . '}',
                ObjectSerializer::toPathValue($purchaseOrderId),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/xml'],
            $contentType,
            $multipart
        );

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // for model (json/xml)
        if (isset($orderRefund)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($orderRefund));
            } else {
                $httpBody = $orderRefund;
            }
        } else if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $query = ObjectSerializer::buildQuery($queryParams);
        $requestInfo = [
            'path' => $resourcePath,
            'method' => $method,
            'timestamp' => $defaultHeaders['WM_SEC.TIMESTAMP'],
            'query' => $query,
        ];

        $signatureApiKey = $this->config->getApiKey('signature', $requestInfo);
        if ($signatureApiKey !== null) {
            $headers['WM_SEC.AUTH_SIGNATURE'] = $signatureApiKey;
        }

        $consumerIdApiKey = $this->config->getApiKey('consumerId', $requestInfo);
        if ($consumerIdApiKey !== null) {
            $headers['WM_CONSUMER.ID'] = $consumerIdApiKey;
        }

        $channelTypeApiKey = $this->config->getApiKey('channelType', $requestInfo);
        if ($channelTypeApiKey !== null) {
            $headers['WM_CONSUMER.CHANNEL.TYPE'] = $channelTypeApiKey;
        }

        $operationHost = $this->config->getHost();
        return new Request(
            $method,
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shippingUpdatesCA
     *
     * Shipping Updates
     *
     * @param  string $purchaseOrderId The purchase order ID (required)
     * @param  \Walmart\Models\MP\CA\Orders\OrderShipment $orderShipment File fields (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\CA\Orders\Order
     */
    public function shippingUpdatesCA(
        string $purchaseOrderId,
        \Walmart\Models\MP\CA\Orders\OrderShipment $orderShipment
    ): \Walmart\Models\MP\CA\Orders\Order {
        return $this->shippingUpdatesCAWithHttpInfo($purchaseOrderId, $orderShipment);
    }

    /**
     * Operation shippingUpdatesCAWithHttpInfo
     *
     * Shipping Updates
     *
     * @param  string $purchaseOrderId The purchase order ID (required)
     * @param  \Walmart\Models\MP\CA\Orders\OrderShipment $orderShipment File fields (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\MP\CA\Orders\Order
     */
    protected function shippingUpdatesCAWithHttpInfo(
        string $purchaseOrderId,
        \Walmart\Models\MP\CA\Orders\OrderShipment $orderShipment,
    ): \Walmart\Models\MP\CA\Orders\Order {
        $request = $this->shippingUpdatesCARequest($purchaseOrderId, $orderShipment);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\MP\CA\Orders\Order' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        $contentType = $response->getHeader('Content-Type')[0] ?? '';
                        if ('\Walmart\Models\MP\CA\Orders\Order' !== 'string') {
                            $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\MP\CA\Orders\Order', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\MP\CA\Orders\Order';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                $contentType = $response->getHeader('Content-Type')[0] ?? '';
                if ($returnType !== 'string') {
                    $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\MP\CA\Orders\Order',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation shippingUpdatesCAAsync
     *
     * Shipping Updates
     *
     * @param  string $purchaseOrderId The purchase order ID (required)
     * @param  \Walmart\Models\MP\CA\Orders\OrderShipment $orderShipment File fields (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shippingUpdatesCAAsync(
        string $purchaseOrderId,
        \Walmart\Models\MP\CA\Orders\OrderShipment $orderShipment
    ): PromiseInterface {
        return $this->shippingUpdatesCAAsyncWithHttpInfo($purchaseOrderId, $orderShipment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shippingUpdatesCAAsyncWithHttpInfo
     *
     * Shipping Updates
     *
     * @param  string $purchaseOrderId The purchase order ID (required)
     * @param  \Walmart\Models\MP\CA\Orders\OrderShipment $orderShipment File fields (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function shippingUpdatesCAAsyncWithHttpInfo(
        string $purchaseOrderId,
        \Walmart\Models\MP\CA\Orders\OrderShipment $orderShipment,
    ): PromiseInterface {
        $returnType = '\Walmart\Models\MP\CA\Orders\Order';
        $request = $this->shippingUpdatesCARequest($purchaseOrderId, $orderShipment);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'shippingUpdatesCA'
     *
     * @param  string $purchaseOrderId The purchase order ID (required)
     * @param  \Walmart\Models\MP\CA\Orders\OrderShipment $orderShipment File fields (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shippingUpdatesCARequest(
        string $purchaseOrderId,
        \Walmart\Models\MP\CA\Orders\OrderShipment $orderShipment,
    ): Request {
        $contentType = self::contentTypes['shippingUpdatesCA'];

        // verify the required parameter 'purchaseOrderId' is set
        if ($purchaseOrderId === null || (is_array($purchaseOrderId) && count($purchaseOrderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchaseOrderId when calling shippingUpdatesCA'
            );
        }
        // verify the required parameter 'orderShipment' is set
        if ($orderShipment === null || (is_array($orderShipment) && count($orderShipment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderShipment when calling shippingUpdatesCA'
            );
        }
        $resourcePath = '/v3/ca/orders/{purchaseOrderId}/shipping';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $method = 'POST';

        // path params
        if ($purchaseOrderId !== null) {
            $resourcePath = str_replace(
                '{' . 'purchaseOrderId' . '}',
                ObjectSerializer::toPathValue($purchaseOrderId),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/xml'],
            $contentType,
            $multipart
        );

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // for model (json/xml)
        if (isset($orderShipment)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($orderShipment));
            } else {
                $httpBody = $orderShipment;
            }
        } else if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $query = ObjectSerializer::buildQuery($queryParams);
        $requestInfo = [
            'path' => $resourcePath,
            'method' => $method,
            'timestamp' => $defaultHeaders['WM_SEC.TIMESTAMP'],
            'query' => $query,
        ];

        $signatureApiKey = $this->config->getApiKey('signature', $requestInfo);
        if ($signatureApiKey !== null) {
            $headers['WM_SEC.AUTH_SIGNATURE'] = $signatureApiKey;
        }

        $consumerIdApiKey = $this->config->getApiKey('consumerId', $requestInfo);
        if ($consumerIdApiKey !== null) {
            $headers['WM_CONSUMER.ID'] = $consumerIdApiKey;
        }

        $channelTypeApiKey = $this->config->getApiKey('channelType', $requestInfo);
        if ($channelTypeApiKey !== null) {
            $headers['WM_CONSUMER.CHANNEL.TYPE'] = $channelTypeApiKey;
        }

        $operationHost = $this->config->getHost();
        return new Request(
            $method,
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }
}

