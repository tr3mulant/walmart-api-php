<?php

/**
 * DSVOrdersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 */

/**
 * Order Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Apis\Supplier\US;

use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use Walmart\Apis\BaseApi;
use Walmart\ApiException;
use Walmart\ObjectSerializer;

/**
 * DSVOrdersApi Class Doc Comment
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class DSVOrdersApi extends BaseApi
{
    /**
     * @var string[] $contentTypes
     */
    public const contentTypes = [
        'acknowledgeOrders' => 'application/json',
        'cancelOrderLines' => 'application/json',
        'getAllOrders' => 'application/json',
        'getAllReleasedOrders' => 'application/json',
        'getAnOrder' => 'application/json',
        'shipOrderLines' => 'application/json',
    ];

    /**
     * Operation acknowledgeOrders
     *
     * Acknowledge Orders
     *
     * @param  string $purchaseOrderId A unique ID associated with the purchase order. Used for querying an order. (required)
     * @param  string $shipNode The Distribution Facility “Distributor ID” which uniquely identifies each facility and is autogenerated during DSV account creation. Every time you add/update a facility in the Supplier Center, a new ID is generated (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord
     */
    public function acknowledgeOrders(
        string $purchaseOrderId,
        string $shipNode
    ): \Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord {
        return $this->acknowledgeOrdersWithHttpInfo($purchaseOrderId, $shipNode);
    }

    /**
     * Operation acknowledgeOrdersWithHttpInfo
     *
     * Acknowledge Orders
     *
     * @param  string $purchaseOrderId A unique ID associated with the purchase order. Used for querying an order. (required)
     * @param  string $shipNode The Distribution Facility “Distributor ID” which uniquely identifies each facility and is autogenerated during DSV account creation. Every time you add/update a facility in the Supplier Center, a new ID is generated (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord
     */
    protected function acknowledgeOrdersWithHttpInfo(
        string $purchaseOrderId,
        string $shipNode,
    ): \Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord {
        $request = $this->acknowledgeOrdersRequest($purchaseOrderId, $shipNode);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        $contentType = $response->getHeader('Content-Type')[0] ?? '';
                        if ('\Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord' !== 'string') {
                            $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                $contentType = $response->getHeader('Content-Type')[0] ?? '';
                if ($returnType !== 'string') {
                    $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation acknowledgeOrdersAsync
     *
     * Acknowledge Orders
     *
     * @param  string $purchaseOrderId A unique ID associated with the purchase order. Used for querying an order. (required)
     * @param  string $shipNode The Distribution Facility “Distributor ID” which uniquely identifies each facility and is autogenerated during DSV account creation. Every time you add/update a facility in the Supplier Center, a new ID is generated (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acknowledgeOrdersAsync(
        string $purchaseOrderId,
        string $shipNode
    ): PromiseInterface {
        return $this->acknowledgeOrdersAsyncWithHttpInfo($purchaseOrderId, $shipNode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation acknowledgeOrdersAsyncWithHttpInfo
     *
     * Acknowledge Orders
     *
     * @param  string $purchaseOrderId A unique ID associated with the purchase order. Used for querying an order. (required)
     * @param  string $shipNode The Distribution Facility “Distributor ID” which uniquely identifies each facility and is autogenerated during DSV account creation. Every time you add/update a facility in the Supplier Center, a new ID is generated (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function acknowledgeOrdersAsyncWithHttpInfo(
        string $purchaseOrderId,
        string $shipNode,
    ): PromiseInterface {
        $returnType = '\Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord';
        $request = $this->acknowledgeOrdersRequest($purchaseOrderId, $shipNode);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'acknowledgeOrders'
     *
     * @param  string $purchaseOrderId A unique ID associated with the purchase order. Used for querying an order. (required)
     * @param  string $shipNode The Distribution Facility “Distributor ID” which uniquely identifies each facility and is autogenerated during DSV account creation. Every time you add/update a facility in the Supplier Center, a new ID is generated (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function acknowledgeOrdersRequest(
        string $purchaseOrderId,
        string $shipNode,
    ): Request {
        $contentType = self::contentTypes['acknowledgeOrders'];

        // verify the required parameter 'purchaseOrderId' is set
        if ($purchaseOrderId === null || (is_array($purchaseOrderId) && count($purchaseOrderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchaseOrderId when calling acknowledgeOrders'
            );
        }
        // verify the required parameter 'shipNode' is set
        if ($shipNode === null || (is_array($shipNode) && count($shipNode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipNode when calling acknowledgeOrders'
            );
        }
        $resourcePath = '/v3/orders/{purchaseOrderId}/acknowledge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $method = 'POST';

        // query params
        $queryParams = array_merge(
            ObjectSerializer::toQueryValue(
                $shipNode,
                'shipNode', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                true // required
            ) ?? [],
        );

        // path params
        if ($purchaseOrderId !== null) {
            $resourcePath = str_replace(
                '{' . 'purchaseOrderId' . '}',
                ObjectSerializer::toPathValue($purchaseOrderId),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $query = ObjectSerializer::buildQuery($queryParams);
        $requestInfo = [
            'path' => $resourcePath,
            'method' => $method,
            'timestamp' => $defaultHeaders['WM_SEC.TIMESTAMP'],
            'query' => $query,
        ];

        $partnerApiKey = $this->config->getApiKey('partner', $requestInfo);
        if ($partnerApiKey !== null) {
            $headers['WM_PARTNER.ID'] = $partnerApiKey;
        }

        $signatureApiKey = $this->config->getApiKey('signature', $requestInfo);
        if ($signatureApiKey !== null) {
            $headers['WM_SEC.AUTH_SIGNATURE'] = $signatureApiKey;
        }

        $consumerIdApiKey = $this->config->getApiKey('consumerId', $requestInfo);
        if ($consumerIdApiKey !== null) {
            $headers['WM_CONSUMER.ID'] = $consumerIdApiKey;
        }

        // this endpoint requires Bearer authentication (access token)
        $token = $this->config->getAccessToken();
        if ($token) {
            $headers['WM_SEC.ACCESS_TOKEN'] = $token->accessToken;
        }

        $operationHost = $this->config->getHost();
        return new Request(
            $method,
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelOrderLines
     *
     * Cancel order lines
     *
     * @param  string $purchaseOrderId A unique ID associated with the purchase order. Used for querying. (required)
     * @param  string $shipNode The Distribution Facility “Distributor ID” which uniquely identifies each facility and is autogenerated during DSV account creation. Every time you add/update a facility in the Supplier Center, a new ID is generated (required)
     * @param  \Walmart\Models\Supplier\US\DSVOrders\OrderCancellation $orderCancellation File fields (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord
     */
    public function cancelOrderLines(
        string $purchaseOrderId,
        string $shipNode,
        \Walmart\Models\Supplier\US\DSVOrders\OrderCancellation $orderCancellation
    ): \Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord {
        return $this->cancelOrderLinesWithHttpInfo($purchaseOrderId, $shipNode, $orderCancellation);
    }

    /**
     * Operation cancelOrderLinesWithHttpInfo
     *
     * Cancel order lines
     *
     * @param  string $purchaseOrderId A unique ID associated with the purchase order. Used for querying. (required)
     * @param  string $shipNode The Distribution Facility “Distributor ID” which uniquely identifies each facility and is autogenerated during DSV account creation. Every time you add/update a facility in the Supplier Center, a new ID is generated (required)
     * @param  \Walmart\Models\Supplier\US\DSVOrders\OrderCancellation $orderCancellation File fields (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord
     */
    protected function cancelOrderLinesWithHttpInfo(
        string $purchaseOrderId,
        string $shipNode,
        \Walmart\Models\Supplier\US\DSVOrders\OrderCancellation $orderCancellation,
    ): \Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord {
        $request = $this->cancelOrderLinesRequest($purchaseOrderId, $shipNode, $orderCancellation);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        $contentType = $response->getHeader('Content-Type')[0] ?? '';
                        if ('\Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord' !== 'string') {
                            $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                $contentType = $response->getHeader('Content-Type')[0] ?? '';
                if ($returnType !== 'string') {
                    $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation cancelOrderLinesAsync
     *
     * Cancel order lines
     *
     * @param  string $purchaseOrderId A unique ID associated with the purchase order. Used for querying. (required)
     * @param  string $shipNode The Distribution Facility “Distributor ID” which uniquely identifies each facility and is autogenerated during DSV account creation. Every time you add/update a facility in the Supplier Center, a new ID is generated (required)
     * @param  \Walmart\Models\Supplier\US\DSVOrders\OrderCancellation $orderCancellation File fields (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelOrderLinesAsync(
        string $purchaseOrderId,
        string $shipNode,
        \Walmart\Models\Supplier\US\DSVOrders\OrderCancellation $orderCancellation
    ): PromiseInterface {
        return $this->cancelOrderLinesAsyncWithHttpInfo($purchaseOrderId, $shipNode, $orderCancellation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelOrderLinesAsyncWithHttpInfo
     *
     * Cancel order lines
     *
     * @param  string $purchaseOrderId A unique ID associated with the purchase order. Used for querying. (required)
     * @param  string $shipNode The Distribution Facility “Distributor ID” which uniquely identifies each facility and is autogenerated during DSV account creation. Every time you add/update a facility in the Supplier Center, a new ID is generated (required)
     * @param  \Walmart\Models\Supplier\US\DSVOrders\OrderCancellation $orderCancellation File fields (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function cancelOrderLinesAsyncWithHttpInfo(
        string $purchaseOrderId,
        string $shipNode,
        \Walmart\Models\Supplier\US\DSVOrders\OrderCancellation $orderCancellation,
    ): PromiseInterface {
        $returnType = '\Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord';
        $request = $this->cancelOrderLinesRequest($purchaseOrderId, $shipNode, $orderCancellation);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelOrderLines'
     *
     * @param  string $purchaseOrderId A unique ID associated with the purchase order. Used for querying. (required)
     * @param  string $shipNode The Distribution Facility “Distributor ID” which uniquely identifies each facility and is autogenerated during DSV account creation. Every time you add/update a facility in the Supplier Center, a new ID is generated (required)
     * @param  \Walmart\Models\Supplier\US\DSVOrders\OrderCancellation $orderCancellation File fields (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelOrderLinesRequest(
        string $purchaseOrderId,
        string $shipNode,
        \Walmart\Models\Supplier\US\DSVOrders\OrderCancellation $orderCancellation,
    ): Request {
        $contentType = self::contentTypes['cancelOrderLines'];

        // verify the required parameter 'purchaseOrderId' is set
        if ($purchaseOrderId === null || (is_array($purchaseOrderId) && count($purchaseOrderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchaseOrderId when calling cancelOrderLines'
            );
        }
        // verify the required parameter 'shipNode' is set
        if ($shipNode === null || (is_array($shipNode) && count($shipNode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipNode when calling cancelOrderLines'
            );
        }
        // verify the required parameter 'orderCancellation' is set
        if ($orderCancellation === null || (is_array($orderCancellation) && count($orderCancellation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderCancellation when calling cancelOrderLines'
            );
        }
        $resourcePath = '/v3/orders/{purchaseOrderId}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $method = 'POST';

        // query params
        $queryParams = array_merge(
            ObjectSerializer::toQueryValue(
                $shipNode,
                'shipNode', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                true // required
            ) ?? [],
        );

        // path params
        if ($purchaseOrderId !== null) {
            $resourcePath = str_replace(
                '{' . 'purchaseOrderId' . '}',
                ObjectSerializer::toPathValue($purchaseOrderId),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // for model (json/xml)
        if (isset($orderCancellation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($orderCancellation));
            } else {
                $httpBody = $orderCancellation;
            }
        } else if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $query = ObjectSerializer::buildQuery($queryParams);
        $requestInfo = [
            'path' => $resourcePath,
            'method' => $method,
            'timestamp' => $defaultHeaders['WM_SEC.TIMESTAMP'],
            'query' => $query,
        ];

        $partnerApiKey = $this->config->getApiKey('partner', $requestInfo);
        if ($partnerApiKey !== null) {
            $headers['WM_PARTNER.ID'] = $partnerApiKey;
        }

        $signatureApiKey = $this->config->getApiKey('signature', $requestInfo);
        if ($signatureApiKey !== null) {
            $headers['WM_SEC.AUTH_SIGNATURE'] = $signatureApiKey;
        }

        $consumerIdApiKey = $this->config->getApiKey('consumerId', $requestInfo);
        if ($consumerIdApiKey !== null) {
            $headers['WM_CONSUMER.ID'] = $consumerIdApiKey;
        }

        // this endpoint requires Bearer authentication (access token)
        $token = $this->config->getAccessToken();
        if ($token) {
            $headers['WM_SEC.ACCESS_TOKEN'] = $token->accessToken;
        }

        $operationHost = $this->config->getHost();
        return new Request(
            $method,
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllOrders
     *
     * All orders
     *
     * @param  string $shipNode The Distribution Facility “Distributor ID” which uniquely identifies each facility and is autogenerated during DSV account creation. Every time you add/update a facility in the Supplier Center, a new ID is generated (required)
     * @param  string $limit The number of orders to be returned. Cannot be larger than 200. (optional, default to '100')
     * @param  string $sku An arbitrary alphanumeric unique ID, specified by the DSV, which identifies each item. This will be used by the DSV in the XSD file to refer to each item. Special characters in the sku needing encoding are: ':', '/', '?', '#', '[', ']', '@', '!', '$', '&', \"'\", '(', ')', '*', '+', ',', ';', '=', as well as '%' itself. Other characters don't need to be encoded. (optional)
     * @param  string $customerOrderId A unique ID associated with the sales orders to retrieve or filter the orders (optional)
     * @param  string $purchaseOrderId A unique ID associated with the purchase order. Used to query a purchase order. (optional)
     * @param  string $status Status of purchase order line. Valid statuses are: Created, Acknowledged, Shipped, Delivered and Cancelled. (optional)
     * @param  string $createdStartDate Fetches all purchase orders that were created after this date. Default is current date - 7 days Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $createdEndDate Fetches all purchase orders that were created before this date. Default is current date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $fromExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date after this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $toExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date before this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $productInfo Provides the image URL and product weight in response, if available. Allowed values are true or false. (optional, default to 'false')
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\Supplier\US\DSVOrders\OrdersListType
     */
    public function getAllOrders(
        string $shipNode,
        ?string $limit = '100',
        ?string $sku = null,
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null,
        ?string $status = null,
        ?string $createdStartDate = null,
        ?string $createdEndDate = null,
        ?string $fromExpectedShipDate = null,
        ?string $toExpectedShipDate = null,
        ?string $productInfo = 'false'
    ): \Walmart\Models\Supplier\US\DSVOrders\OrdersListType {
        return $this->getAllOrdersWithHttpInfo($shipNode, $limit, $sku, $customerOrderId, $purchaseOrderId, $status, $createdStartDate, $createdEndDate, $fromExpectedShipDate, $toExpectedShipDate, $productInfo);
    }

    /**
     * Operation getAllOrdersWithHttpInfo
     *
     * All orders
     *
     * @param  string $shipNode The Distribution Facility “Distributor ID” which uniquely identifies each facility and is autogenerated during DSV account creation. Every time you add/update a facility in the Supplier Center, a new ID is generated (required)
     * @param  string $limit The number of orders to be returned. Cannot be larger than 200. (optional, default to '100')
     * @param  string $sku An arbitrary alphanumeric unique ID, specified by the DSV, which identifies each item. This will be used by the DSV in the XSD file to refer to each item. Special characters in the sku needing encoding are: ':', '/', '?', '#', '[', ']', '@', '!', '$', '&', \"'\", '(', ')', '*', '+', ',', ';', '=', as well as '%' itself. Other characters don't need to be encoded. (optional)
     * @param  string $customerOrderId A unique ID associated with the sales orders to retrieve or filter the orders (optional)
     * @param  string $purchaseOrderId A unique ID associated with the purchase order. Used to query a purchase order. (optional)
     * @param  string $status Status of purchase order line. Valid statuses are: Created, Acknowledged, Shipped, Delivered and Cancelled. (optional)
     * @param  string $createdStartDate Fetches all purchase orders that were created after this date. Default is current date - 7 days Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $createdEndDate Fetches all purchase orders that were created before this date. Default is current date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $fromExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date after this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $toExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date before this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $productInfo Provides the image URL and product weight in response, if available. Allowed values are true or false. (optional, default to 'false')
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\Supplier\US\DSVOrders\OrdersListType
     */
    protected function getAllOrdersWithHttpInfo(
        string $shipNode,
        ?string $limit = '100',
        ?string $sku = null,
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null,
        ?string $status = null,
        ?string $createdStartDate = null,
        ?string $createdEndDate = null,
        ?string $fromExpectedShipDate = null,
        ?string $toExpectedShipDate = null,
        ?string $productInfo = 'false',
    ): \Walmart\Models\Supplier\US\DSVOrders\OrdersListType {
        $request = $this->getAllOrdersRequest($shipNode, $limit, $sku, $customerOrderId, $purchaseOrderId, $status, $createdStartDate, $createdEndDate, $fromExpectedShipDate, $toExpectedShipDate, $productInfo);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\Supplier\US\DSVOrders\OrdersListType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        $contentType = $response->getHeader('Content-Type')[0] ?? '';
                        if ('\Walmart\Models\Supplier\US\DSVOrders\OrdersListType' !== 'string') {
                            $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\Supplier\US\DSVOrders\OrdersListType', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\Supplier\US\DSVOrders\OrdersListType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                $contentType = $response->getHeader('Content-Type')[0] ?? '';
                if ($returnType !== 'string') {
                    $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\Supplier\US\DSVOrders\OrdersListType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation getAllOrdersAsync
     *
     * All orders
     *
     * @param  string $shipNode The Distribution Facility “Distributor ID” which uniquely identifies each facility and is autogenerated during DSV account creation. Every time you add/update a facility in the Supplier Center, a new ID is generated (required)
     * @param  string $limit The number of orders to be returned. Cannot be larger than 200. (optional, default to '100')
     * @param  string $sku An arbitrary alphanumeric unique ID, specified by the DSV, which identifies each item. This will be used by the DSV in the XSD file to refer to each item. Special characters in the sku needing encoding are: ':', '/', '?', '#', '[', ']', '@', '!', '$', '&', \"'\", '(', ')', '*', '+', ',', ';', '=', as well as '%' itself. Other characters don't need to be encoded. (optional)
     * @param  string $customerOrderId A unique ID associated with the sales orders to retrieve or filter the orders (optional)
     * @param  string $purchaseOrderId A unique ID associated with the purchase order. Used to query a purchase order. (optional)
     * @param  string $status Status of purchase order line. Valid statuses are: Created, Acknowledged, Shipped, Delivered and Cancelled. (optional)
     * @param  string $createdStartDate Fetches all purchase orders that were created after this date. Default is current date - 7 days Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $createdEndDate Fetches all purchase orders that were created before this date. Default is current date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $fromExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date after this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $toExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date before this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $productInfo Provides the image URL and product weight in response, if available. Allowed values are true or false. (optional, default to 'false')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllOrdersAsync(
        string $shipNode,
        ?string $limit = '100',
        ?string $sku = null,
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null,
        ?string $status = null,
        ?string $createdStartDate = null,
        ?string $createdEndDate = null,
        ?string $fromExpectedShipDate = null,
        ?string $toExpectedShipDate = null,
        ?string $productInfo = 'false'
    ): PromiseInterface {
        return $this->getAllOrdersAsyncWithHttpInfo($shipNode, $limit, $sku, $customerOrderId, $purchaseOrderId, $status, $createdStartDate, $createdEndDate, $fromExpectedShipDate, $toExpectedShipDate, $productInfo)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllOrdersAsyncWithHttpInfo
     *
     * All orders
     *
     * @param  string $shipNode The Distribution Facility “Distributor ID” which uniquely identifies each facility and is autogenerated during DSV account creation. Every time you add/update a facility in the Supplier Center, a new ID is generated (required)
     * @param  string $limit The number of orders to be returned. Cannot be larger than 200. (optional, default to '100')
     * @param  string $sku An arbitrary alphanumeric unique ID, specified by the DSV, which identifies each item. This will be used by the DSV in the XSD file to refer to each item. Special characters in the sku needing encoding are: ':', '/', '?', '#', '[', ']', '@', '!', '$', '&', \"'\", '(', ')', '*', '+', ',', ';', '=', as well as '%' itself. Other characters don't need to be encoded. (optional)
     * @param  string $customerOrderId A unique ID associated with the sales orders to retrieve or filter the orders (optional)
     * @param  string $purchaseOrderId A unique ID associated with the purchase order. Used to query a purchase order. (optional)
     * @param  string $status Status of purchase order line. Valid statuses are: Created, Acknowledged, Shipped, Delivered and Cancelled. (optional)
     * @param  string $createdStartDate Fetches all purchase orders that were created after this date. Default is current date - 7 days Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $createdEndDate Fetches all purchase orders that were created before this date. Default is current date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $fromExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date after this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $toExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date before this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $productInfo Provides the image URL and product weight in response, if available. Allowed values are true or false. (optional, default to 'false')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function getAllOrdersAsyncWithHttpInfo(
        string $shipNode,
        ?string $limit = '100',
        ?string $sku = null,
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null,
        ?string $status = null,
        ?string $createdStartDate = null,
        ?string $createdEndDate = null,
        ?string $fromExpectedShipDate = null,
        ?string $toExpectedShipDate = null,
        ?string $productInfo = 'false',
    ): PromiseInterface {
        $returnType = '\Walmart\Models\Supplier\US\DSVOrders\OrdersListType';
        $request = $this->getAllOrdersRequest($shipNode, $limit, $sku, $customerOrderId, $purchaseOrderId, $status, $createdStartDate, $createdEndDate, $fromExpectedShipDate, $toExpectedShipDate, $productInfo);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllOrders'
     *
     * @param  string $shipNode The Distribution Facility “Distributor ID” which uniquely identifies each facility and is autogenerated during DSV account creation. Every time you add/update a facility in the Supplier Center, a new ID is generated (required)
     * @param  string $limit The number of orders to be returned. Cannot be larger than 200. (optional, default to '100')
     * @param  string $sku An arbitrary alphanumeric unique ID, specified by the DSV, which identifies each item. This will be used by the DSV in the XSD file to refer to each item. Special characters in the sku needing encoding are: ':', '/', '?', '#', '[', ']', '@', '!', '$', '&', \"'\", '(', ')', '*', '+', ',', ';', '=', as well as '%' itself. Other characters don't need to be encoded. (optional)
     * @param  string $customerOrderId A unique ID associated with the sales orders to retrieve or filter the orders (optional)
     * @param  string $purchaseOrderId A unique ID associated with the purchase order. Used to query a purchase order. (optional)
     * @param  string $status Status of purchase order line. Valid statuses are: Created, Acknowledged, Shipped, Delivered and Cancelled. (optional)
     * @param  string $createdStartDate Fetches all purchase orders that were created after this date. Default is current date - 7 days Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $createdEndDate Fetches all purchase orders that were created before this date. Default is current date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $fromExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date after this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $toExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date before this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $productInfo Provides the image URL and product weight in response, if available. Allowed values are true or false. (optional, default to 'false')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllOrdersRequest(
        string $shipNode,
        ?string $limit = '100',
        ?string $sku = null,
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null,
        ?string $status = null,
        ?string $createdStartDate = null,
        ?string $createdEndDate = null,
        ?string $fromExpectedShipDate = null,
        ?string $toExpectedShipDate = null,
        ?string $productInfo = 'false',
    ): Request {
        $contentType = self::contentTypes['getAllOrders'];

        // verify the required parameter 'shipNode' is set
        if ($shipNode === null || (is_array($shipNode) && count($shipNode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipNode when calling getAllOrders'
            );
        }
        $resourcePath = '/v3/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $method = 'GET';

        // query params
        $queryParams = array_merge(
            ObjectSerializer::toQueryValue(
                $shipNode,
                'shipNode', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                true // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $limit,
                'limit', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $sku,
                'sku', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $customerOrderId,
                'customerOrderId', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $purchaseOrderId,
                'purchaseOrderId', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $status,
                'status', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $createdStartDate,
                'createdStartDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $createdEndDate,
                'createdEndDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $fromExpectedShipDate,
                'fromExpectedShipDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $toExpectedShipDate,
                'toExpectedShipDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $productInfo,
                'productInfo', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
        );

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $query = ObjectSerializer::buildQuery($queryParams);
        $requestInfo = [
            'path' => $resourcePath,
            'method' => $method,
            'timestamp' => $defaultHeaders['WM_SEC.TIMESTAMP'],
            'query' => $query,
        ];

        $partnerApiKey = $this->config->getApiKey('partner', $requestInfo);
        if ($partnerApiKey !== null) {
            $headers['WM_PARTNER.ID'] = $partnerApiKey;
        }

        $signatureApiKey = $this->config->getApiKey('signature', $requestInfo);
        if ($signatureApiKey !== null) {
            $headers['WM_SEC.AUTH_SIGNATURE'] = $signatureApiKey;
        }

        $consumerIdApiKey = $this->config->getApiKey('consumerId', $requestInfo);
        if ($consumerIdApiKey !== null) {
            $headers['WM_CONSUMER.ID'] = $consumerIdApiKey;
        }

        // this endpoint requires Bearer authentication (access token)
        $token = $this->config->getAccessToken();
        if ($token) {
            $headers['WM_SEC.ACCESS_TOKEN'] = $token->accessToken;
        }

        $operationHost = $this->config->getHost();
        return new Request(
            $method,
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllReleasedOrders
     *
     * All released orders
     *
     * @param  string $shipNode The Distribution Facility “Distributor ID” which uniquely identifies each facility and is autogenerated during DSV account creation. Every time you add/update a facility in the Supplier Center, a new ID is generated (required)
     * @param  string $sku An arbitrary alphanumeric unique ID, specified by the DSV, which identifies each item. This will be used by the DSV in the XSD file to refer to each item. Special characters in the sku needing encoding are: ':', '/', '?', '#', '[', ']', '@', '!', '$', '&', \"'\", '(', ')', '*', '+', ',', ';', '=', as well as '%' itself. Other characters don't need to be encoded. (optional)
     * @param  string $customerOrderId A unique ID associated with the sales orders to retrieve or filter the orders (optional)
     * @param  string $purchaseOrderId A unique ID associated with the purchase order. Used to query a purchase order. (optional)
     * @param  string $createdStartDate Fetches all purchase orders that were created after this date. Default is current date - 7 days. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $createdEndDate Fetches all purchase orders that were created before this date. Default is current date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $fromExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date after this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $toExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date before this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $limit The number of orders to be returned. Cannot be larger than 200. (optional, default to '100')
     * @param  string $productInfo Provides the image URL and product weight in response, if available. Allowed values are true or false. (optional, default to 'false')
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\Supplier\US\DSVOrders\OrdersListType
     */
    public function getAllReleasedOrders(
        string $shipNode,
        ?string $sku = null,
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null,
        ?string $createdStartDate = null,
        ?string $createdEndDate = null,
        ?string $fromExpectedShipDate = null,
        ?string $toExpectedShipDate = null,
        ?string $limit = '100',
        ?string $productInfo = 'false'
    ): \Walmart\Models\Supplier\US\DSVOrders\OrdersListType {
        return $this->getAllReleasedOrdersWithHttpInfo($shipNode, $sku, $customerOrderId, $purchaseOrderId, $createdStartDate, $createdEndDate, $fromExpectedShipDate, $toExpectedShipDate, $limit, $productInfo);
    }

    /**
     * Operation getAllReleasedOrdersWithHttpInfo
     *
     * All released orders
     *
     * @param  string $shipNode The Distribution Facility “Distributor ID” which uniquely identifies each facility and is autogenerated during DSV account creation. Every time you add/update a facility in the Supplier Center, a new ID is generated (required)
     * @param  string $sku An arbitrary alphanumeric unique ID, specified by the DSV, which identifies each item. This will be used by the DSV in the XSD file to refer to each item. Special characters in the sku needing encoding are: ':', '/', '?', '#', '[', ']', '@', '!', '$', '&', \"'\", '(', ')', '*', '+', ',', ';', '=', as well as '%' itself. Other characters don't need to be encoded. (optional)
     * @param  string $customerOrderId A unique ID associated with the sales orders to retrieve or filter the orders (optional)
     * @param  string $purchaseOrderId A unique ID associated with the purchase order. Used to query a purchase order. (optional)
     * @param  string $createdStartDate Fetches all purchase orders that were created after this date. Default is current date - 7 days. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $createdEndDate Fetches all purchase orders that were created before this date. Default is current date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $fromExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date after this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $toExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date before this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $limit The number of orders to be returned. Cannot be larger than 200. (optional, default to '100')
     * @param  string $productInfo Provides the image URL and product weight in response, if available. Allowed values are true or false. (optional, default to 'false')
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\Supplier\US\DSVOrders\OrdersListType
     */
    protected function getAllReleasedOrdersWithHttpInfo(
        string $shipNode,
        ?string $sku = null,
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null,
        ?string $createdStartDate = null,
        ?string $createdEndDate = null,
        ?string $fromExpectedShipDate = null,
        ?string $toExpectedShipDate = null,
        ?string $limit = '100',
        ?string $productInfo = 'false',
    ): \Walmart\Models\Supplier\US\DSVOrders\OrdersListType {
        $request = $this->getAllReleasedOrdersRequest($shipNode, $sku, $customerOrderId, $purchaseOrderId, $createdStartDate, $createdEndDate, $fromExpectedShipDate, $toExpectedShipDate, $limit, $productInfo);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\Supplier\US\DSVOrders\OrdersListType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        $contentType = $response->getHeader('Content-Type')[0] ?? '';
                        if ('\Walmart\Models\Supplier\US\DSVOrders\OrdersListType' !== 'string') {
                            $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\Supplier\US\DSVOrders\OrdersListType', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\Supplier\US\DSVOrders\OrdersListType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                $contentType = $response->getHeader('Content-Type')[0] ?? '';
                if ($returnType !== 'string') {
                    $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\Supplier\US\DSVOrders\OrdersListType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation getAllReleasedOrdersAsync
     *
     * All released orders
     *
     * @param  string $shipNode The Distribution Facility “Distributor ID” which uniquely identifies each facility and is autogenerated during DSV account creation. Every time you add/update a facility in the Supplier Center, a new ID is generated (required)
     * @param  string $sku An arbitrary alphanumeric unique ID, specified by the DSV, which identifies each item. This will be used by the DSV in the XSD file to refer to each item. Special characters in the sku needing encoding are: ':', '/', '?', '#', '[', ']', '@', '!', '$', '&', \"'\", '(', ')', '*', '+', ',', ';', '=', as well as '%' itself. Other characters don't need to be encoded. (optional)
     * @param  string $customerOrderId A unique ID associated with the sales orders to retrieve or filter the orders (optional)
     * @param  string $purchaseOrderId A unique ID associated with the purchase order. Used to query a purchase order. (optional)
     * @param  string $createdStartDate Fetches all purchase orders that were created after this date. Default is current date - 7 days. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $createdEndDate Fetches all purchase orders that were created before this date. Default is current date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $fromExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date after this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $toExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date before this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $limit The number of orders to be returned. Cannot be larger than 200. (optional, default to '100')
     * @param  string $productInfo Provides the image URL and product weight in response, if available. Allowed values are true or false. (optional, default to 'false')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllReleasedOrdersAsync(
        string $shipNode,
        ?string $sku = null,
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null,
        ?string $createdStartDate = null,
        ?string $createdEndDate = null,
        ?string $fromExpectedShipDate = null,
        ?string $toExpectedShipDate = null,
        ?string $limit = '100',
        ?string $productInfo = 'false'
    ): PromiseInterface {
        return $this->getAllReleasedOrdersAsyncWithHttpInfo($shipNode, $sku, $customerOrderId, $purchaseOrderId, $createdStartDate, $createdEndDate, $fromExpectedShipDate, $toExpectedShipDate, $limit, $productInfo)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllReleasedOrdersAsyncWithHttpInfo
     *
     * All released orders
     *
     * @param  string $shipNode The Distribution Facility “Distributor ID” which uniquely identifies each facility and is autogenerated during DSV account creation. Every time you add/update a facility in the Supplier Center, a new ID is generated (required)
     * @param  string $sku An arbitrary alphanumeric unique ID, specified by the DSV, which identifies each item. This will be used by the DSV in the XSD file to refer to each item. Special characters in the sku needing encoding are: ':', '/', '?', '#', '[', ']', '@', '!', '$', '&', \"'\", '(', ')', '*', '+', ',', ';', '=', as well as '%' itself. Other characters don't need to be encoded. (optional)
     * @param  string $customerOrderId A unique ID associated with the sales orders to retrieve or filter the orders (optional)
     * @param  string $purchaseOrderId A unique ID associated with the purchase order. Used to query a purchase order. (optional)
     * @param  string $createdStartDate Fetches all purchase orders that were created after this date. Default is current date - 7 days. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $createdEndDate Fetches all purchase orders that were created before this date. Default is current date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $fromExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date after this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $toExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date before this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $limit The number of orders to be returned. Cannot be larger than 200. (optional, default to '100')
     * @param  string $productInfo Provides the image URL and product weight in response, if available. Allowed values are true or false. (optional, default to 'false')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function getAllReleasedOrdersAsyncWithHttpInfo(
        string $shipNode,
        ?string $sku = null,
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null,
        ?string $createdStartDate = null,
        ?string $createdEndDate = null,
        ?string $fromExpectedShipDate = null,
        ?string $toExpectedShipDate = null,
        ?string $limit = '100',
        ?string $productInfo = 'false',
    ): PromiseInterface {
        $returnType = '\Walmart\Models\Supplier\US\DSVOrders\OrdersListType';
        $request = $this->getAllReleasedOrdersRequest($shipNode, $sku, $customerOrderId, $purchaseOrderId, $createdStartDate, $createdEndDate, $fromExpectedShipDate, $toExpectedShipDate, $limit, $productInfo);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllReleasedOrders'
     *
     * @param  string $shipNode The Distribution Facility “Distributor ID” which uniquely identifies each facility and is autogenerated during DSV account creation. Every time you add/update a facility in the Supplier Center, a new ID is generated (required)
     * @param  string $sku An arbitrary alphanumeric unique ID, specified by the DSV, which identifies each item. This will be used by the DSV in the XSD file to refer to each item. Special characters in the sku needing encoding are: ':', '/', '?', '#', '[', ']', '@', '!', '$', '&', \"'\", '(', ')', '*', '+', ',', ';', '=', as well as '%' itself. Other characters don't need to be encoded. (optional)
     * @param  string $customerOrderId A unique ID associated with the sales orders to retrieve or filter the orders (optional)
     * @param  string $purchaseOrderId A unique ID associated with the purchase order. Used to query a purchase order. (optional)
     * @param  string $createdStartDate Fetches all purchase orders that were created after this date. Default is current date - 7 days. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $createdEndDate Fetches all purchase orders that were created before this date. Default is current date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ). (optional)
     * @param  string $fromExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date after this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $toExpectedShipDate Fetches all purchase orders that have order lines with an expected ship date before this date. Use either UTC or ISO 8601 formats. Date example: '2020-03-16'(yyyy-MM-dd). Date with Timestamp example: '2020-03-16T10:30:15Z'(yyyy-MM-dd'T'HH:mm:ssZ) (optional)
     * @param  string $limit The number of orders to be returned. Cannot be larger than 200. (optional, default to '100')
     * @param  string $productInfo Provides the image URL and product weight in response, if available. Allowed values are true or false. (optional, default to 'false')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllReleasedOrdersRequest(
        string $shipNode,
        ?string $sku = null,
        ?string $customerOrderId = null,
        ?string $purchaseOrderId = null,
        ?string $createdStartDate = null,
        ?string $createdEndDate = null,
        ?string $fromExpectedShipDate = null,
        ?string $toExpectedShipDate = null,
        ?string $limit = '100',
        ?string $productInfo = 'false',
    ): Request {
        $contentType = self::contentTypes['getAllReleasedOrders'];

        // verify the required parameter 'shipNode' is set
        if ($shipNode === null || (is_array($shipNode) && count($shipNode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipNode when calling getAllReleasedOrders'
            );
        }
        $resourcePath = '/v3/orders/released';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $method = 'GET';

        // query params
        $queryParams = array_merge(
            ObjectSerializer::toQueryValue(
                $sku,
                'sku', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $customerOrderId,
                'customerOrderId', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $purchaseOrderId,
                'purchaseOrderId', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $createdStartDate,
                'createdStartDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $createdEndDate,
                'createdEndDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $fromExpectedShipDate,
                'fromExpectedShipDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $toExpectedShipDate,
                'toExpectedShipDate', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $shipNode,
                'shipNode', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                true // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $limit,
                'limit', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $productInfo,
                'productInfo', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
        );

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $query = ObjectSerializer::buildQuery($queryParams);
        $requestInfo = [
            'path' => $resourcePath,
            'method' => $method,
            'timestamp' => $defaultHeaders['WM_SEC.TIMESTAMP'],
            'query' => $query,
        ];

        $partnerApiKey = $this->config->getApiKey('partner', $requestInfo);
        if ($partnerApiKey !== null) {
            $headers['WM_PARTNER.ID'] = $partnerApiKey;
        }

        $signatureApiKey = $this->config->getApiKey('signature', $requestInfo);
        if ($signatureApiKey !== null) {
            $headers['WM_SEC.AUTH_SIGNATURE'] = $signatureApiKey;
        }

        $consumerIdApiKey = $this->config->getApiKey('consumerId', $requestInfo);
        if ($consumerIdApiKey !== null) {
            $headers['WM_CONSUMER.ID'] = $consumerIdApiKey;
        }

        // this endpoint requires Bearer authentication (access token)
        $token = $this->config->getAccessToken();
        if ($token) {
            $headers['WM_SEC.ACCESS_TOKEN'] = $token->accessToken;
        }

        $operationHost = $this->config->getHost();
        return new Request(
            $method,
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAnOrder
     *
     * An order
     *
     * @param  string $purchaseOrderId A unique ID associated with the purchase order, used for querying an order (required)
     * @param  string $shipNode The Distribution Facility “Distributor ID” which uniquely identifies each facility and is autogenerated during DSV account creation. Every time you add/update a facility in the Supplier Center, a new ID is generated (required)
     * @param  string $productInfo Provides the image URL and product weight in response, if available. Allowed values are true or false. (optional, default to 'true')
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord
     */
    public function getAnOrder(
        string $purchaseOrderId,
        string $shipNode,
        ?string $productInfo = 'true'
    ): \Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord {
        return $this->getAnOrderWithHttpInfo($purchaseOrderId, $shipNode, $productInfo);
    }

    /**
     * Operation getAnOrderWithHttpInfo
     *
     * An order
     *
     * @param  string $purchaseOrderId A unique ID associated with the purchase order, used for querying an order (required)
     * @param  string $shipNode The Distribution Facility “Distributor ID” which uniquely identifies each facility and is autogenerated during DSV account creation. Every time you add/update a facility in the Supplier Center, a new ID is generated (required)
     * @param  string $productInfo Provides the image URL and product weight in response, if available. Allowed values are true or false. (optional, default to 'true')
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord
     */
    protected function getAnOrderWithHttpInfo(
        string $purchaseOrderId,
        string $shipNode,
        ?string $productInfo = 'true',
    ): \Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord {
        $request = $this->getAnOrderRequest($purchaseOrderId, $shipNode, $productInfo);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        $contentType = $response->getHeader('Content-Type')[0] ?? '';
                        if ('\Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord' !== 'string') {
                            $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                $contentType = $response->getHeader('Content-Type')[0] ?? '';
                if ($returnType !== 'string') {
                    $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation getAnOrderAsync
     *
     * An order
     *
     * @param  string $purchaseOrderId A unique ID associated with the purchase order, used for querying an order (required)
     * @param  string $shipNode The Distribution Facility “Distributor ID” which uniquely identifies each facility and is autogenerated during DSV account creation. Every time you add/update a facility in the Supplier Center, a new ID is generated (required)
     * @param  string $productInfo Provides the image URL and product weight in response, if available. Allowed values are true or false. (optional, default to 'true')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAnOrderAsync(
        string $purchaseOrderId,
        string $shipNode,
        ?string $productInfo = 'true'
    ): PromiseInterface {
        return $this->getAnOrderAsyncWithHttpInfo($purchaseOrderId, $shipNode, $productInfo)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAnOrderAsyncWithHttpInfo
     *
     * An order
     *
     * @param  string $purchaseOrderId A unique ID associated with the purchase order, used for querying an order (required)
     * @param  string $shipNode The Distribution Facility “Distributor ID” which uniquely identifies each facility and is autogenerated during DSV account creation. Every time you add/update a facility in the Supplier Center, a new ID is generated (required)
     * @param  string $productInfo Provides the image URL and product weight in response, if available. Allowed values are true or false. (optional, default to 'true')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function getAnOrderAsyncWithHttpInfo(
        string $purchaseOrderId,
        string $shipNode,
        ?string $productInfo = 'true',
    ): PromiseInterface {
        $returnType = '\Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord';
        $request = $this->getAnOrderRequest($purchaseOrderId, $shipNode, $productInfo);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAnOrder'
     *
     * @param  string $purchaseOrderId A unique ID associated with the purchase order, used for querying an order (required)
     * @param  string $shipNode The Distribution Facility “Distributor ID” which uniquely identifies each facility and is autogenerated during DSV account creation. Every time you add/update a facility in the Supplier Center, a new ID is generated (required)
     * @param  string $productInfo Provides the image URL and product weight in response, if available. Allowed values are true or false. (optional, default to 'true')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAnOrderRequest(
        string $purchaseOrderId,
        string $shipNode,
        ?string $productInfo = 'true',
    ): Request {
        $contentType = self::contentTypes['getAnOrder'];

        // verify the required parameter 'purchaseOrderId' is set
        if ($purchaseOrderId === null || (is_array($purchaseOrderId) && count($purchaseOrderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchaseOrderId when calling getAnOrder'
            );
        }
        // verify the required parameter 'shipNode' is set
        if ($shipNode === null || (is_array($shipNode) && count($shipNode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipNode when calling getAnOrder'
            );
        }
        $resourcePath = '/v3/orders/{purchaseOrderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $method = 'GET';

        // query params
        $queryParams = array_merge(
            ObjectSerializer::toQueryValue(
                $shipNode,
                'shipNode', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                true // required
            ) ?? [],
            ObjectSerializer::toQueryValue(
                $productInfo,
                'productInfo', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? [],
        );

        // path params
        if ($purchaseOrderId !== null) {
            $resourcePath = str_replace(
                '{' . 'purchaseOrderId' . '}',
                ObjectSerializer::toPathValue($purchaseOrderId),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $query = ObjectSerializer::buildQuery($queryParams);
        $requestInfo = [
            'path' => $resourcePath,
            'method' => $method,
            'timestamp' => $defaultHeaders['WM_SEC.TIMESTAMP'],
            'query' => $query,
        ];

        $partnerApiKey = $this->config->getApiKey('partner', $requestInfo);
        if ($partnerApiKey !== null) {
            $headers['WM_PARTNER.ID'] = $partnerApiKey;
        }

        $signatureApiKey = $this->config->getApiKey('signature', $requestInfo);
        if ($signatureApiKey !== null) {
            $headers['WM_SEC.AUTH_SIGNATURE'] = $signatureApiKey;
        }

        $consumerIdApiKey = $this->config->getApiKey('consumerId', $requestInfo);
        if ($consumerIdApiKey !== null) {
            $headers['WM_CONSUMER.ID'] = $consumerIdApiKey;
        }

        // this endpoint requires Bearer authentication (access token)
        $token = $this->config->getAccessToken();
        if ($token) {
            $headers['WM_SEC.ACCESS_TOKEN'] = $token->accessToken;
        }

        $operationHost = $this->config->getHost();
        return new Request(
            $method,
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipOrderLines
     *
     * Ship order lines
     *
     * @param  string $purchaseOrderId A unique ID associated with the purchase order, used for querying (required)
     * @param  string $shipNode The Distribution Facility “Distributor ID” which uniquely identifies each facility and is autogenerated during DSV account creation. Every time you add/update a facility in the Supplier Center, a new ID is generated (required)
     * @param  \Walmart\Models\Supplier\US\DSVOrders\OrderCancellation $orderCancellation File fields (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord
     */
    public function shipOrderLines(
        string $purchaseOrderId,
        string $shipNode,
        \Walmart\Models\Supplier\US\DSVOrders\OrderCancellation $orderCancellation
    ): \Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord {
        return $this->shipOrderLinesWithHttpInfo($purchaseOrderId, $shipNode, $orderCancellation);
    }

    /**
     * Operation shipOrderLinesWithHttpInfo
     *
     * Ship order lines
     *
     * @param  string $purchaseOrderId A unique ID associated with the purchase order, used for querying (required)
     * @param  string $shipNode The Distribution Facility “Distributor ID” which uniquely identifies each facility and is autogenerated during DSV account creation. Every time you add/update a facility in the Supplier Center, a new ID is generated (required)
     * @param  \Walmart\Models\Supplier\US\DSVOrders\OrderCancellation $orderCancellation File fields (required)
     *
     * @throws \Walmart\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord
     */
    protected function shipOrderLinesWithHttpInfo(
        string $purchaseOrderId,
        string $shipNode,
        \Walmart\Models\Supplier\US\DSVOrders\OrderCancellation $orderCancellation,
    ): \Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord {
        $request = $this->shipOrderLinesRequest($purchaseOrderId, $shipNode, $orderCancellation);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    (int) $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : null,
                    $body
                );
            } catch (ConnectException $e) {
                $this->writeDebug($e->getMessage());

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            switch ($statusCode) {
                case 200:
                    if ('\Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        $contentType = $response->getHeader('Content-Type')[0] ?? '';
                        if ('\Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord' !== 'string') {
                            $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, '\Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord', $response->getHeaders());
            }

            $returnType = '\Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                $contentType = $response->getHeader('Content-Type')[0] ?? '';
                if ($returnType !== 'string') {
                    $content = $contentType === 'application/xml' ? simplexml_load_string($content) : json_decode($content);
                }
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation shipOrderLinesAsync
     *
     * Ship order lines
     *
     * @param  string $purchaseOrderId A unique ID associated with the purchase order, used for querying (required)
     * @param  string $shipNode The Distribution Facility “Distributor ID” which uniquely identifies each facility and is autogenerated during DSV account creation. Every time you add/update a facility in the Supplier Center, a new ID is generated (required)
     * @param  \Walmart\Models\Supplier\US\DSVOrders\OrderCancellation $orderCancellation File fields (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipOrderLinesAsync(
        string $purchaseOrderId,
        string $shipNode,
        \Walmart\Models\Supplier\US\DSVOrders\OrderCancellation $orderCancellation
    ): PromiseInterface {
        return $this->shipOrderLinesAsyncWithHttpInfo($purchaseOrderId, $shipNode, $orderCancellation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipOrderLinesAsyncWithHttpInfo
     *
     * Ship order lines
     *
     * @param  string $purchaseOrderId A unique ID associated with the purchase order, used for querying (required)
     * @param  string $shipNode The Distribution Facility “Distributor ID” which uniquely identifies each facility and is autogenerated during DSV account creation. Every time you add/update a facility in the Supplier Center, a new ID is generated (required)
     * @param  \Walmart\Models\Supplier\US\DSVOrders\OrderCancellation $orderCancellation File fields (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    protected function shipOrderLinesAsyncWithHttpInfo(
        string $purchaseOrderId,
        string $shipNode,
        \Walmart\Models\Supplier\US\DSVOrders\OrderCancellation $orderCancellation,
    ): PromiseInterface {
        $returnType = '\Walmart\Models\Supplier\US\DSVOrders\GetOrderResponseRecord';
        $request = $this->shipOrderLinesRequest($purchaseOrderId, $shipNode, $orderCancellation);
        $this->writeDebug($request);
        $this->writeDebug((string) $request->getBody());

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $this->writeDebug((string) $response->getBody());
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $body,
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipOrderLines'
     *
     * @param  string $purchaseOrderId A unique ID associated with the purchase order, used for querying (required)
     * @param  string $shipNode The Distribution Facility “Distributor ID” which uniquely identifies each facility and is autogenerated during DSV account creation. Every time you add/update a facility in the Supplier Center, a new ID is generated (required)
     * @param  \Walmart\Models\Supplier\US\DSVOrders\OrderCancellation $orderCancellation File fields (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipOrderLinesRequest(
        string $purchaseOrderId,
        string $shipNode,
        \Walmart\Models\Supplier\US\DSVOrders\OrderCancellation $orderCancellation,
    ): Request {
        $contentType = self::contentTypes['shipOrderLines'];

        // verify the required parameter 'purchaseOrderId' is set
        if ($purchaseOrderId === null || (is_array($purchaseOrderId) && count($purchaseOrderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchaseOrderId when calling shipOrderLines'
            );
        }
        // verify the required parameter 'shipNode' is set
        if ($shipNode === null || (is_array($shipNode) && count($shipNode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipNode when calling shipOrderLines'
            );
        }
        // verify the required parameter 'orderCancellation' is set
        if ($orderCancellation === null || (is_array($orderCancellation) && count($orderCancellation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderCancellation when calling shipOrderLines'
            );
        }
        $resourcePath = '/v3/orders/{purchaseOrderId}/shipping';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
        $method = 'POST';

        // query params
        $queryParams = array_merge(
            ObjectSerializer::toQueryValue(
                $shipNode,
                'shipNode', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                true // required
            ) ?? [],
        );

        // path params
        if ($purchaseOrderId !== null) {
            $resourcePath = str_replace(
                '{' . 'purchaseOrderId' . '}',
                ObjectSerializer::toPathValue($purchaseOrderId),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        $defaultHeaders = parent::getDefaultHeaders();
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        // for model (json/xml)
        if (isset($orderCancellation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($orderCancellation));
            } else {
                $httpBody = $orderCancellation;
            }
        } else if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $query = ObjectSerializer::buildQuery($queryParams);
        $requestInfo = [
            'path' => $resourcePath,
            'method' => $method,
            'timestamp' => $defaultHeaders['WM_SEC.TIMESTAMP'],
            'query' => $query,
        ];

        $partnerApiKey = $this->config->getApiKey('partner', $requestInfo);
        if ($partnerApiKey !== null) {
            $headers['WM_PARTNER.ID'] = $partnerApiKey;
        }

        $signatureApiKey = $this->config->getApiKey('signature', $requestInfo);
        if ($signatureApiKey !== null) {
            $headers['WM_SEC.AUTH_SIGNATURE'] = $signatureApiKey;
        }

        $consumerIdApiKey = $this->config->getApiKey('consumerId', $requestInfo);
        if ($consumerIdApiKey !== null) {
            $headers['WM_CONSUMER.ID'] = $consumerIdApiKey;
        }

        // this endpoint requires Bearer authentication (access token)
        $token = $this->config->getAccessToken();
        if ($token) {
            $headers['WM_SEC.ACCESS_TOKEN'] = $token->accessToken;
        }

        $operationHost = $this->config->getHost();
        return new Request(
            $method,
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }
}

