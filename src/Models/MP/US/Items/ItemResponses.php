<?php

/**
 * ItemResponses
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Item Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\US\Items;

use Walmart\Models\BaseModel;

/**
 * ItemResponses Class Doc Comment
 *
 * @category Class

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class ItemResponses extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ItemResponses';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'itemResponse' => '\Walmart\Models\MP\US\Items\ItemResponse[]',
        'additionalAttributes' => '\Walmart\Models\MP\US\Items\NameValueAttributes',
        'totalItems' => 'int',
        'nextCursor' => 'string',
        'error' => '\Walmart\Models\MP\US\Items\GatewayError[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'itemResponse' => null,
        'additionalAttributes' => null,
        'totalItems' => 'int64',
        'nextCursor' => null,
        'error' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'itemResponse' => false,
        'additionalAttributes' => false,
        'totalItems' => false,
        'nextCursor' => false,
        'error' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'itemResponse' => 'ItemResponse',
        'additionalAttributes' => 'additionalAttributes',
        'totalItems' => 'totalItems',
        'nextCursor' => 'nextCursor',
        'error' => 'error'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'itemResponse' => 'setItemResponse',
        'additionalAttributes' => 'setAdditionalAttributes',
        'totalItems' => 'setTotalItems',
        'nextCursor' => 'setNextCursor',
        'error' => 'setError'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'itemResponse' => 'getItemResponse',
        'additionalAttributes' => 'getAdditionalAttributes',
        'totalItems' => 'getTotalItems',
        'nextCursor' => 'getNextCursor',
        'error' => 'getError'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('itemResponse', $data ?? [], null);
        $this->setIfExists('additionalAttributes', $data ?? [], null);
        $this->setIfExists('totalItems', $data ?? [], null);
        $this->setIfExists('nextCursor', $data ?? [], null);
        $this->setIfExists('error', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['itemResponse'] === null) {
            $invalidProperties[] = "'itemResponse' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Gets itemResponse
     *
     * @return \Walmart\Models\MP\US\Items\ItemResponse[]
    
     */
    public function getItemResponse()
    {
        return $this->container['itemResponse'];
    }

    /**
     * Sets itemResponse
     *
     * @param \Walmart\Models\MP\US\Items\ItemResponse[] $itemResponse Items included in the response list
     *
     * @return self
    
     */
    public function setItemResponse($itemResponse)
    {
        if (is_null($itemResponse)) {
            throw new \InvalidArgumentException('non-nullable itemResponse cannot be null');
        }

        $this->container['itemResponse'] = $itemResponse;
        return $this;
    }

    /**
     * Gets additionalAttributes
     *
     * @return \Walmart\Models\MP\US\Items\NameValueAttributes|null
    
     */
    public function getAdditionalAttributes()
    {
        return $this->container['additionalAttributes'];
    }

    /**
     * Sets additionalAttributes
     *
     * @param \Walmart\Models\MP\US\Items\NameValueAttributes|null $additionalAttributes additionalAttributes
     *
     * @return self
    
     */
    public function setAdditionalAttributes($additionalAttributes)
    {
        if (is_null($additionalAttributes)) {
            throw new \InvalidArgumentException('non-nullable additionalAttributes cannot be null');
        }

        $this->container['additionalAttributes'] = $additionalAttributes;
        return $this;
    }

    /**
     * Gets totalItems
     *
     * @return int|null
    
     */
    public function getTotalItems()
    {
        return $this->container['totalItems'];
    }

    /**
     * Sets totalItems
     *
     * @param int|null $totalItems Total items for the query
     *
     * @return self
    
     */
    public function setTotalItems($totalItems)
    {
        if (is_null($totalItems)) {
            throw new \InvalidArgumentException('non-nullable totalItems cannot be null');
        }

        $this->container['totalItems'] = $totalItems;
        return $this;
    }

    /**
     * Gets nextCursor
     *
     * @return string|null
    
     */
    public function getNextCursor()
    {
        return $this->container['nextCursor'];
    }

    /**
     * Sets nextCursor
     *
     * @param string|null $nextCursor Used for pagination to fetch the next set of items
     *
     * @return self
    
     */
    public function setNextCursor($nextCursor)
    {
        if (is_null($nextCursor)) {
            throw new \InvalidArgumentException('non-nullable nextCursor cannot be null');
        }

        $this->container['nextCursor'] = $nextCursor;
        return $this;
    }

    /**
     * Gets error
     *
     * @return \Walmart\Models\MP\US\Items\GatewayError[]|null
    
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param \Walmart\Models\MP\US\Items\GatewayError[]|null $error error
     *
     * @return self
    
     */
    public function setError($error)
    {
        if (is_null($error)) {
            throw new \InvalidArgumentException('non-nullable error cannot be null');
        }

        $this->container['error'] = $error;
        return $this;
    }
}
