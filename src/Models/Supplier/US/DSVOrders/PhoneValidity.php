<?php

/**
 * PhoneValidity
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Order Management
 *
 * This class is auto-generated by the OpenAPI generator v6.6.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\Supplier\US\DSVOrders;

use Walmart\Models\BaseModel;

/**
 * PhoneValidity Class Doc Comment
 *
 * @category Class

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class PhoneValidity extends BaseModel
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'PhoneValidity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'validatedBy' => 'string',
        'type' => 'string',
        'status' => 'string',
        'validatedOn' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'validatedBy' => null,
        'type' => null,
        'status' => null,
        'validatedOn' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'validatedBy' => false,
        'type' => false,
        'status' => false,
        'validatedOn' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'validatedBy' => 'validatedBy',
        'type' => 'type',
        'status' => 'status',
        'validatedOn' => 'validatedOn'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'validatedBy' => 'setValidatedBy',
        'type' => 'setType',
        'status' => 'setStatus',
        'validatedOn' => 'setValidatedOn'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'validatedBy' => 'getValidatedBy',
        'type' => 'getType',
        'status' => 'getStatus',
        'validatedOn' => 'getValidatedOn'
    ];


    public const TYPE_SMS = 'SMS';

    public const TYPE_IVR = 'IVR';

    public const TYPE_CALL = 'CALL';

    public const TYPE_UNKNOWN = 'UNKNOWN';

    public const STATUS_SUCCESS = 'SUCCESS';

    public const STATUS_FAILURE = 'FAILURE';

    public const STATUS_SKIPPED = 'SKIPPED';

    public const STATUS_UNKNOWN = 'UNKNOWN';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_SMS,
            self::TYPE_IVR,
            self::TYPE_CALL,
            self::TYPE_UNKNOWN,
        ];
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_SUCCESS,
            self::STATUS_FAILURE,
            self::STATUS_SKIPPED,
            self::STATUS_UNKNOWN,
        ];
    }

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('validatedBy', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('validatedOn', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }


        return $invalidProperties;
    }

    /**
     * Gets validatedBy
     *
     * @return string|null
    
     */
    public function getValidatedBy()
    {
        return $this->container['validatedBy'];
    }

    /**
     * Sets validatedBy
     *
     * @param string|null $validatedBy validatedBy
     *
     * @return self
    
     */
    public function setValidatedBy($validatedBy)
    {
        if (is_null($validatedBy)) {
            throw new \InvalidArgumentException('non-nullable validatedBy cannot be null');
        }

        $this->container['validatedBy'] = $validatedBy;
        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
    
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
    
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['type'] = $type;
        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
    
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
    
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }

        $this->container['status'] = $status;
        return $this;
    }

    /**
     * Gets validatedOn
     *
     * @return \DateTime|null
    
     */
    public function getValidatedOn()
    {
        return $this->container['validatedOn'];
    }

    /**
     * Sets validatedOn
     *
     * @param \DateTime|null $validatedOn validatedOn
     *
     * @return self
    
     */
    public function setValidatedOn($validatedOn)
    {
        if (is_null($validatedOn)) {
            throw new \InvalidArgumentException('non-nullable validatedOn cannot be null');
        }

        $this->container['validatedOn'] = $validatedOn;
        return $this;
    }
}
